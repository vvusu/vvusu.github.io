[{"title":"Ubuntu24.04 编译OpenWRT","path":"/2024/08/05/Ubuntu24.04 编译OpenWRT/","content":"Lean 的 LEDE 源码仓库https://github.com/coolsnowwolf/lede视频安装教程https://www.youtube.com/watch?v=yQoKpL4p06Eluci app 列表https://www.right.com.cn/forum/thread-344825-1-1.html 首先装好 Ubuntu 64bit，推荐 Ubuntu 20.04 LTS x64https://ubuntu.com/download/desktop 命令行输入123456789sudo apt update -ysudo apt full-upgrade -ysudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \\bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \\git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \\libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \\libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \\python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \\uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev 使用git clone https://github.com/coolsnowwolf/lede 命令下载好源代码,然后,进入目录 缝合一些其他插件原地址:https://github.com/kenzok8/openwrt-packages添加下面代码复制到 lede 源码根目录 feeds.conf.default 文件 12src-git kenzo https://github.com/kenzok8/openwrt-packagessrc-git small https://github.com/kenzok8/small 更新包12./scripts/feeds update -a./scripts/feeds install -a 编译设置1make menuconfig 下载 dl 库，编译固件 （-j 后面是线程数，第一次编译推荐用单线程）12make download -j8make V=s -j1 二次编译：1234567cd ledegit pull./scripts/feeds update -a./scripts/feeds install -amake defconfigmake download -j8make V=s -j$(nproc) 如果需要重新配置： 123rm -rf .configmake menuconfigmake V=s -j$(nproc) 更改 LAN 口的默认 IP 地址 123cd ledevim package/base-files/files/bin/config_generate// 大概在 99 行找到我们默认的原 IP 地址（192.168.1.1），按 “i” 把对应的 IP 更改即可 修改固件其他信息编译丰富插件时，建议修改下面两项默认大小，留足插件空间。（ x86&#x2F;64 ）！！！Target Images —&gt; (16) Kernel partition size (in MB) # 默认是 (16) 建议修改 (256)Target Images —&gt; (160) Root filesystem partition size (in MB) # 默认是 (160) 建议修改 (512) 如果需要 Cloudflare DDNS 组件默认情况下 Open­Wrt 中并没有 Cloud­flare DDNS 功能，就算勾选了 DDNS 也不包含 cloudflare 运营商。所以需要在编译时选择相应的组件，其位置在 Network→IP Addresses and Names →ddns-scripets_cloudflare.com-v4 更改固件版本信息 1sed -i &quot;s/OpenWrt /$(date +%Y.%m.%d) 2022/xx/xx /g&quot; package/lean/default-settings/files/zzz-default-settings 环境配置编译环境搭建How to install python3-distutils on ubuntu 24.04 1sudo apt install python3-setuptools Ubuntu 24.04 LTS 安装 Python2 失败解决 安装 Ubuntu24.04 之后，安装 python2 会提示： 1234567891011~/$ sudo apt install python2Reading package lists... DoneBuilding dependency tree... DoneReading state information... DonePackage python2 is not available, but is referred to by another package.This may mean that the package is missing, has been obsoleted, oris only available from another sourceE: Package &#x27;python2&#x27; has no installation candidate 解决方式： 1234567891011wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgzsudo tar xzf Python-2.7.9.tgzcd Python-2.7.9sudo ./configure --enable-optimizationssudo make altinstall// 安装之后python2.7 -V~ Python 2.7.9sudo ln -sfn &#x27;/usr/local/bin/python2.7&#x27; &#x27;/usr/bin/python2&#x27;sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 1 设置可选择 python 版本： 12345678sudo update-alternatives --config pythonThere are 2 choices for the alternative python (providing /usr/bin/python). Selection Path Priority Status------------------------------------------------------------* 0 /usr/bin/python3 2 auto mode 1 /usr/bin/python2 1 manual mode 2 /usr/bin/python3 2 manual modePress to keep the current choice[*], or type selection number: 1 123sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 2sudo update-alternatives --config python （选择切换Python版本）python --version （查看Python版本）","tags":["Proxmox","软路由"]},{"title":"PVE 创建通用模版","path":"/2024/06/23/PVE 创建通用模版/","content":"创建lxc容器模板乌班图下载12/var/lib/vz/template/cache#上传文件夹 容器创建取消特权容器勾选其他配置根据自己实际情况设定 容器优化容器完善创建完成后容器，不要开机，进入对应容器的选项勾选一下选项 嵌套 nfs smb fuse 容器配置文件进入pve控制台，进入&#x2F;etc&#x2F;pve&#x2F;lxc文件夹，修改对应的配置文件，添加以下内容 12345lxc.apparmor.profile: unconfinedlxc.cgroup.devices.allow: alxc.cap.drop: lxc.cgroup2.devices.allow: c 10:200 rwmlxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file 12345lxc.apparmor.profile: unconfined：这个配置用于 AppArmor 安全模块，指定容器的安全配置为 uncon find（未限制），即容器内的进程可以访问主机上所有的资源。lxc.cgroup.devices.allow: a：这个配置用于控制容器内的进程可以使用哪些设备。这里的“a”表示“允许所有设备”。lxc.cap.drop: 这个配置用于控制容器内进程的能力（capability）权限，这里为空表示不限制。lxc.cgroup2.devices.allow: c 10:200 rwm：这个配置用于控制容器内进程可以使用的 cgroup2 控制器（controller）。c 10:200 表示容器内进程可以使用 /sys/fs/cgroup/unified/system.slice/ 目录下的控制器，rwm 表示容器内进程可以读、写、创建这些控制器。lxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file：这个配置用于在容器内创建 /dev/net/tun 设备节点，并且将它绑定到主机上对应的节点。这个设备节点用于容器内的进程实现网络隔离和虚拟网络。 开启第三方登录1234nano /etc/ssh/sshd_configPermitRootLogin yes //默认为 no，需要开启 root 用户访问改为 yes PasswordAuthentication yes //默认为 no，改为 yes 开启密码登陆service ssh restart 设置东八区与中文12345678timedatectl set-timezone Asia/Shanghai# 追加本地语言配置echo &quot;zh_CN.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.gen# 重新配置本地语言dpkg-reconfigure locales# 指定本地语言export LC_ALL=&quot;zh_CN.UTF-8&quot;#中文的设置 常用软件安装123456apt updateapt install zsh git vim curl -ysh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;apt install docker.ioapt-get install docker-compose 添加未知命令提示工具1234567nano ~/.zshrc. /etc/zsh_command_not_found#在文件末尾添加以上内容source ~/.zshrc#配置生效","tags":["Proxmox","软路由"]},{"title":"使用 RSS 打造一套自己的信息系统","path":"/2024/05/01/通过 RSS 打造一套自己的信息系统/","content":"信息来源 新闻资讯网站 大佬们的博客 YouTube 频道视频 Twitter 用户 Telegram 频道 微信公众号 信息聚合Huginnhttps://github.com/huginn/huginn还有 Huginn 方案，但它的使用门槛较高，需要一定的服务器知识，大多数情况下，使用 Huginn 有点大材小用。 使用 Miniflux 搭建自己的 RSS 服务https://pinw.ca/zhs/posts/self-hosted-rss/ Docker 部署 12345678910docker run -d \\--name miniflux \\--restart unless-stopped \\-p 8096:8080 \\-e &quot;DATABASE_URL=postgres://user:password@server/miniflux?sslmode=disable&quot; \\-e &quot;RUN_MIGRATIONS=1&quot; \\-e &quot;CREATE_ADMIN=1&quot; \\-e &quot;ADMIN_USERNAME=admin&quot; \\-e &quot;ADMIN_PASSWORD=password&quot; \\docker.io/miniflux/miniflux:latest RSS 历史RSS（Really Simple Syndication）是一种用于发布经常更新内容的网页格式，允许用户通过订阅器获取最新更新的技术。 在当今信息爆炸的时代，人们面临着来自各种应用程序和平台的海量信息。尽管这些信息带来了便利和多样性，但也存在着一些弊端。随着社交媒体、新闻应用和其他在线服务的不断涌现，人们往往面临信息过载、碎片化的问题，导致注意力分散、信息质量下降以及信息焦虑的增加。 在这样的背景下，RSS技术作为一种传统而有效的信息订阅方式再次显得尤为重要。通过使用RSS订阅器，人们可以自主选择他们感兴趣的内容源，并将这些内容集中在一个统一的平台上，避免了需要频繁浏览多个应用程序或网站的麻烦。这种方式不仅节省了时间，还有助于保持信息的整体性和连贯性。 与社交媒体平台和应用程序不同，RSS订阅不受算法的影响，用户可以更加自主地选择他们想要关注的内容，避免了信息被过滤或推送的问题。此外，RSS订阅器通常提供简洁清晰的阅读界面，让用户专注于内容本身，而不会受到广告、推荐内容等干扰。 因此，尽管在当今数字化时代，人们可以通过各种应用程序和平台获取信息，但使用传统的RSS订阅方式仍然具有独特的优势。它为用户提供了一种更加有序、自主和高效的信息获取方式，有助于应对信息过载和碎片化带来的问题，推荐大家尝试使用RSS订阅器来管理自己的信息获取方式，以获得更加高效和有质量的信息体验。 RSS 源获取使用 RSSHubRSSHub官方提供的服务是https://rsshub.app/，用的人太多，容易失效，强烈建议自己部署 RSSHub 服务。 Docker CLI 部署 123456789docker run -dt \\--name=rsshub \\-p 8095:1200/tcp \\-e NODE_ENV=production \\-e CACHE_TYPE=redis \\-e REDIS_URL=redis://:password@server:6379 \\-v /opt/docker/rsshub/data:/lib/data \\--restart unless-stopped \\diygod/rsshub 这时我们用Chrome打开http://ip:8095/路径，即可看到以下页面，说明部署成功。 如果没有自己的服务器，也可以使用网上公开的公益服使用。RSSHub 镜像网站如下，可能有失效的。 服务器1 ：https://rsshub.rssforever.com服务器2 ：https://rss.injahow.cn 服务器3 ：https://rss.shab.fun 服务器4 ：https://rss.injahow.cn 服务器5 ：https://rsshub.anyant.xyz 使用 RSSHub 制作 RSS 源RSSHub 的使用方法非常简单，查看 RSSHub使用手册 (opens new window)拼接出对应服务的订阅地址即可。 RSS 源检测RSSHub Radar轻松查找和订阅 RSS 和 RSSHubGithub: 地址Chrome store : 地址 另外一种方法是使用油猴脚本的方式添加 RSS+ 。 rss-bridgeThe RSS feed for websites missing it 在线地址: https://rss-bridge.org/bridge01/Github地址: https://github.com/RSS-Bridge/rss-bridge rss-proxyRSS-proxy 是一个工具，它允许您创建几乎任何网站的 RSS&#x2F;ATOM 或 JSON 提要，仅通过分析静态 HTML 结构。 在线地址: https://rssproxy.migor.org/Github地址: https://github.com/damoeb/rss-proxy Docker CLI 部署 123456docker run -idt \\--name=rss-proxy \\-p 8097:8080/tcp \\-e APP_API_GATEWAY_URL=https://server \\--restart unless-stopped \\damoeb/rss-proxy:2.1 wewe-rss优雅的微信公众号订阅方式，支持私有化部署、微信公众号RSS生成（基于微信读书） Github地址: https://github.com/cooderl/wewe-rssDocker CLI 部署 1234567docker run -d \\--name wewe-rss \\-p 8098:4000 \\-e DATABASE_URL=&#x27;mysql://user:password@server:3306/wewe-rss?schema=public&amp;connect_timeout=30&amp;pool_timeout=30&amp;socket_timeout=30&#x27; \\-e AUTH_CODE=xxx_code_xxx \\--restart unless-stopped \\cooderl/wewe-rss:latest RSS订阅源推荐https://rss-source.com/ MoreRSShttps://morerss.com/zh.php 中文独立博客列表https://github.com/timqian/chinese-independent-blogs 订阅人数最多的rss源，中文优质rss源https://github.com/weekend-project-space/top-rss-list?tab=readme-ov-file YouTube 频道 ID 提取器https://seostudio.tools/zh/youtube-channel-id 将电子邮件通讯转换为 Atom feedhttps://kill-the-newsletter.com/ bestblogs.dev - 汇集顶级编程、人工智能、产品、科技文章，大语言模型摘要评分辅助阅读，探索编程和技术未来https://www.bestblogs.dev/enhttps://github.com/ginobefun/BestBlogs/blob/main/BestBlogsRSS.opml 信息消费Mac 客户端推荐 : 首推 Reeder 体验最佳 其次可以选择开源软件 Fluent Reader。 Windows 客户端推荐 ：Fluent ReaderiOS 客户端推荐 : Reeder Fluent ReaderAndroid 客户端推荐 : FeedMe","tags":["工具","技术"]},{"title":"CloudFlare Zero Trust 架构解析与实践指南","path":"/2023/09/26/CloudFlare Zero Trust/","content":"零信任安全架构演进传统安全模型的局限（此处展开 500 字论述传统边界防御模型的缺陷，包括 VPN 的脆弱性、内网信任危机等） Zero Trust 核心原则（600 字详解 Never Trust, Always Verify 原则，包含身份验证、最小权限、持续验证等核心要素） CloudFlare Zero Trust 架构解析核心组件构成（图解说明 Cloudflare Tunnel、Access、Gateway 等组件的协同工作原理） 1. Cloudflare Tunnel 反向隧道技术原理 与传统 VPN 的对比优势 TCP&#x2F;UDP 全协议支持特性 2. Access 策略引擎 基于上下文的访问控制 多因素认证集成方案 设备健康状态检查机制 3. Gateway 安全网关 DNS 层过滤策略 HTTP&#x2F;S 流量审查 数据防泄漏(DLP)配置 部署实践环境准备123456# macOS 安装示例brew install cloudflare/cloudflare/cloudflaredsudo cloudflared service install &lt;TOKEN&gt;# Windows 安装.\\cloudflared.exe access rdp --hostname diy.domain.cf --url localhost:3000 典型场景配置远程桌面安全接入12345678910111213# RDP 服务配置模板cloudflared access rdp --hostname v-win.vvusu.com --url localhost:3389cloudflared access rdp --hostname ice-win.vvusu.com --url localhost:3389# 访问策略配置示例policy: - name: rd-access rules: - action: allow identity: email_domain: company.com device: os: Windows 10+ 文件共享服务保护1cloudflared access tcp --hostname v-drive.vvusu.com --url localhost:6690 Web 服务安全暴露123456789HTTP端口策略：- 80/8080：基础Web服务- 2052/2082：应用特定端口- 8880：管理控制台HTTPS强化端口：- 443：标准加密通道- 8443：备用加密端口- 2083/2096：API专用通道 高级配置指南网络策略优化（详细说明基于地理位置、设备类型、时间条件的访问控制策略配置） 日志与监控（讲解 Cloudflare Logs 分析、SIEM 集成、异常流量告警设置） 灾难恢复方案（包含多区域部署、故障转移配置、证书轮换策略） 安全审计与合规PCI DSS 合规实践（阐述如何通过 Zero Trust 架构满足支付卡行业安全标准） GDPR 数据保护（说明数据加密传输、访问日志留存等合规要点） 性能优化建议网络加速配置 Argo Smart Routing 启用 HTTP&#x2F;3 协议优化 缓存策略调优 成本控制方案 流量分析工具使用 计费预警设置 免费套餐优化建议 常见问题排查连接故障诊断12cloudflared tunnel --loglevel debug# 分析日志输出中的错误代码 性能问题定位（包含网络延迟分析工具使用、吞吐量测试方法） 附录：官方资源索引 Cloudflare Zero Trust 白皮书 配置模板仓库 合规性文档中心","tags":["零信任安全","网络架构","云安全"]},{"title":"PVE 8.0升级","path":"/2023/07/12/PVE 8.0升级/","content":"适用于Proxmox VE 8.x更换源，SSH登录到pve后台，然后执行命令。 可以先备份一下系统的订阅源 12345mkdir /etc/apt/sources_backupcp /etc/apt/sources.list /etc/apt/sources_backup/sources.list.bakcp /etc/apt/sources.list.d/ceph.list /etc/apt/sources_backup/ceph.list.bakcp /etc/apt/sources.list.d/pve-enterprise.list /etc/apt/sources_backup/pve-enterprise.list.bak 1.设置 中科大源 PVE 8.x直接编辑： 123456789101112131415161718# 编辑 sources.list 源文件，写入国内源nano /etc/apt/sources.list# 系统自带deb http://ftp.debian.org/debian bookworm main contribdeb http://ftp.debian.org/debian bookworm-updates main contrib# security updatesdeb http://security.debian.org bookworm-security main contrib# 科大源deb https://mirrors.ustc.edu.cn/debian bookworm main contribdeb https://mirrors.ustc.edu.cn/debian bookworm-updates main contribdeb-src https://mirrors.ustc.edu.cn/debian bookworm main contribdeb-src https://mirrors.ustc.edu.cn/debian bookworm-updates main contrib# 编辑文件 pve-no-subscription.listnano /etc/apt/sources.list.d/pve-no-subscription.list# security updatesdeb https://mirrors.ustc.edu.cn/proxmox/debian bookworm pve-no-subscription 确保Debian基础仓库指向新版本Bookworm，从而可以获得新版本所需的软件包。您已经提供了详细的代码示例和国外、国内的镜像源。 12sed -i &#x27;s/bullseye/bookworm/g&#x27; /etc/apt/sources.list sed -i &#x27;s/bullseye/bookworm/g&#x27; /etc/apt/sources.list.d/*.list 对于 Debian 12 以后的版本，所有 Debian 可以分发的打包的非自由固件二进制文件（non-free），比如某些驱动，都被转移到 Debian Archive 中的一个新组件，称为非自由固件（non-free-firmware）。如果您从旧版的 Debian 升级，并且需要这些固件二进制文件，您应该更新您系统上的 &#x2F;etc&#x2F;apt&#x2F;sources.list，以使用这个新组件（来源）： 123sed -i &#x27;s/non-free/non-free non-free-firmware/g&#x27; /etc/apt/sources.listsed -i &#x27;s/non-free/non-free non-free-firmware/g&#x27; /etc/apt/sources.list.d/*.list 或者替换： 1234567# sources.list sed -i &#x27;s|^deb http://ftp.debian.org|deb https://mirrors.ustc.edu.cn|g&#x27; /etc/apt/sources.listsed -i &#x27;s|^deb http://security.debian.org|deb https://mirrors.ustc.edu.cn/debian-security|g&#x27; /etc/apt/sources.list# ceph.listecho &quot;deb https://mirrors.ustc.edu.cn/proxmox/debian/ceph-quincy bookworm no-subscription&quot; &gt; /etc/apt/sources.list.d/ceph.list# pve-enterprise.list echo &quot;&quot; &gt; /etc/apt/sources.list.d/pve-enterprise.list 2. 删除企业源 PVE 8.x1234rm -rf /etc/apt/sources.list.d/pve-enterprise.list# deb &quot;https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian/pve bookworm pve-no-subscription&quot; &gt; /etc/apt/sources.list.d/pve-enterprise.list# echo &quot;deb http://download.proxmox.com/debian/ceph-quincy bookworm no-subscription&quot; &gt; /etc/apt/sources.list.d/ceph.list 3. 下载密钥1wget http://mirrors.ustc.edu.cn/proxmox/debian/proxmox-release-bookworm.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg 4. 添加国内镜像源12echo &quot;deb http://mirrors.ustc.edu.cn/proxmox/debian/pve bookworm pve-no-subscription&quot; &gt;/etc/apt/sources.list.d/pve-install-repo.listapt update -y &amp;&amp; apt dist-upgrade -y","tags":["Proxmox","软路由"]},{"title":"图库","path":"/2023/07/05/设计资源合集/","content":"设计资源合集本仓库旨在收录国内&#x2F;外优秀的设计工具，为独立开发者提供产品设计灵感。 动画示例 uiGradients: 渐变效果合集 Animista: CSS3 动画效果合集 动效库 GSAP: 专业的 JS 动效库，闭源 motion: Framer 出的 framer-motion JS 网络动画开源库 popmotion: React 社区常用的开源动效库 useAnimations: 非常全面的 icon 动效网站，底层使用 Lottie 的方式来渲染。 meteocons:开源带动效的天气图标, 每种样式都包括动画和静态 SVG 文件。 插图库 illustrationkit: 开源插画集合，包含110多个场景和55+人物角色，可免费用于个人和商业项目中。 StorySet: 免费的矢量插画合集。 unDraw: 一个扁平化插画图库,支持下载SVG和PNG格式，可用于商业用途。 Open Doodles: 涂鸦类型的插画集, 来自墨西哥设计师 Pablo Stanley 的最新免费插画资源,可用于商业用途。 openpeeps: 一个手绘插画库，用于创建人物场景，可免费用于个人和商用项目中。 Avataaars: 免费Sketch头像插画素材库。 Irasuton: 提供了80多个分类的插画素材，可免费用于个人和商业项目中。 Girlysozai: 日本可爱手绘插画素材,Girlysozai网站上提供了人物、花、生物、食物等分类的手绘插画素材，可免费用于个人和商业项目中。 404 illustrations: 免费可商用的404插画素材, 网站上有23个PNG和SVG格式的404插画可用在web和移动端的不同场景中，同时这些插画可以免费用在商业和个人项目中。 图标库 iconify: 超全的图标库，支持各种格式。 iconbuddy fontawesome MingCute Logo 生成 iconbuddy iconray logodiffusion icon horse favicon generator 设计学习资源 5 课时让你掌握 Lottie 动画 动效设计网站 Galley appmotion: App 动效设计的汇集网站 webinteractions: 网页动效设计 Gallery 开源图床 PicGo - 跨平台图床管理工具，支持多种云存储的图片上传与管理，适合Markdown写作场景 Awesome-PicGo - PicGo生态的插件和主题合集，包含各类云存储扩展和界面美化方案 obsidian-image-auto-upload-plugin - Obsidian笔记的自动图片上传插件，支持对接PicGo API实现粘贴即传图 backblaze - 高性价比的云存储服务，可作为图床后端存储方案，支持S3兼容API 优秀设计网站分享 toyfight","tags":["分享","设计","资源"]},{"title":"Android 如何抓取淘系的网络请求","path":"/2023/06/02/Android 如何抓取淘系的网络请求/","content":"Android 逆向 pkTool 工具下载： https://github.com/iBotPeaches/Apktool/releases/tag/v2.7.0 下载完 jar 后，找一个你想要反编译的 apk，然后输入以下命令即可 1java -jar apktool_2.7.0.jar d com.taobao.taobao-10.24.20-441-2754.apk 然后我们看到 test 目录就生成了以下这些文件 那么 apktool 生成这些文件和目录分别是什么呢？ 1234567- original 目录：保存了原始的 AndroidManifest.xml 和签名信息- res 目录：应用程序的资源文件目录，包含了应用程序的布局文件、字符串资源、图片资源等。- smali 目录：应用程序的 Smali 代码目录，包含了应用程序的所有 Smali 代码文件（Smali 就是字节码）- assets 目录：应用程序的 assets 目录，包含了应用程序需要使用的各种资源文件，例如音频、视频、图片、配置文件等。- lib 目录：应用程序的库目录，包含了应用程序需要使用的库文件，例如 so 文件等。- AndroidManifest.xml：应用程序的清单文件，包含应用程序的名称、包名、版本号、权限等信息。- apktool.yml：是 APKTool 工具使用的配置文件，用于指定反编译和打包 APK 文件时的各种参数和选项。 输入以下命令进行回编译 1java -jar apktool_2.7.0.jar b taobao-10.24.20 -o taobao.apk 123456Java.perform(function () &#123; var SwitchConfig = Java.use(&#x27;mtopsdk.mtop.global.SwitchConfig&#x27;); SwitchConfig.isGlobalSpdySslSwitchOpen.overload().implementation = function () &#123; return false; &#125;&#125;); 然后使用如下命令启动App进行抓包。抓包效果如下，可以看到已经能抓到了。 1frida -U -l hook.js -f com.taobao.taobao 使用模拟器来进行逆向已 root真机或者Android模拟器，我这边使用MuMu模拟器，具体设置如下： MuMu 模拟器下载地址： MuMu模拟器官网_安卓12模拟器_网易手游模拟器 下载安装完成后，设置一下模拟器的 root 权限模式： 设置模拟器的网络代理： 长按无线连接弹出设置选项框，点击修改网络。 设置网络抓包代理： 安装Charles SSL信任证书： Frida 动态调试工具Mac 端安装 12345pip install fridapip install frida-tools# 版本与 frida-server 需要对齐frida --version frida-server 模拟器或者真机服务端程序下载：（需要根据具体的架构版本下载对应的包，本教程是X86 intel 版本的Mac 所以选择 frida-server-16.0.19-android-x86_64.xz） https://github.com/frida/frida/releases 下载完成之后需要使用 Android ADB 工具安装到对应的模拟器或者真机子上。 ADB工具下载地址：（已安装 Android Studio 自带） 123456# Mac版本：https://dl.google.com/android/repository/platform-tools-latest-darwin.zip# Windows版本：https://dl.google.com/android/repository/platform-tools-latest-windows.zip# Linux版本：https://dl.google.com/android/repository/platform-tools-latest-linux.zip 命令执行： 12345678910111213141516171819202122232425# adb连接mumu模拟器adb connect 127.0.0.1:7555# 启动 adb start-server# 关闭adb kill-server# 查看链接的设备adb devices# 使用adb 把frida-server推送到模拟器里adb push frida-server /data/local/tmp/# adb shell 进入模拟器adb shellcd /data/local/tmp/ls -l# 给 frida-server 添加权限chmod 777 frida-server# 运行frida-server 在电脑端查看模拟器的启动相关进程, 能看到淘宝App的进程ID，说明连接成功。 1frida-ps -U 逆向分析代码：使用Charles、Fiddle等抓包工具对淘系App进行抓包时，会发现总是抓不到包，出现请求不走Charles代理的情况。 这是因为淘系App底层网络通信的协议并不是普通的http协议，而是自己实现的一套私有协议Spdy。 我们需要逆向分析一下App，看看有什么方法是关于这个 Spdy的。 首先需要准备一个需要分析的 APK 包，然后使用 Jadx 工具分析。 下载地址： 解压后打开 jadx-gui ： 打开需要分析的APK文件： 通过分析以及查找相关的字段，获取到比较关键的方法：isGlobalSpdySwitchOpen 这个方法返回 True 的话就回执行淘宝请求的私有协议，我们需要Hook这个方法，让它直接返回 False 不需要使用 Spdy 方式请求数据。 Frida 脚本编写这边使用 Python 编写，也可以使用 JS 编写。 123456789101112131415161718192021222324252627282930313233343536import sysimport frida# 进程 ID frida-ps -U 命令查看得到session = frida.get_usb_device().attach(24233)# 或者 BundleID# session = frida.get_usb_device().attach(&#x27;com.taobao.taobao&#x27;)print(session)# 获取当前活动# rdev = frida.get_remote_device()# session = rdev.attach(&quot;com.taobao.taobao&quot;)# print(rdev)scr = &quot;&quot;&quot;Java.perform(function () &#123; var SwitchConfig = Java.use(&#x27;mtopsdk.mtop.global.SwitchConfig&#x27;); SwitchConfig.isGlobalSpdySwitchOpen.overload().implementation = function()&#123; var ret = this.isGlobalSpdySwitchOpen.apply(this, arguments); console.log(&quot;isGlobalSpdySwitchOpenl &quot; + ret) return false &#125; &#125;)&quot;&quot;&quot;script = session.create_script(scr)def on_message(message, data): print(&#x27;msg: &#x27; + message) if message[&#x27;type&#x27;] == &#x27;send&#x27;: print(&quot;[*] &#123;0&#125;&quot;.format(message[&#x27;payload&#x27;])) else: print(message)script.on(&quot;message&quot;, on_message)script.load()sys.stdin.read() Frida 正式抓包打开 Charles 以及 SSL代理设置，模拟器打开淘宝APP。 运行刚才写好的脚本 1python3 app.py 如果 hook 相关函数成功会有日志输出，显示原来的方法调用返回信息，这样就可以抓到了淘宝的请求包了。 功能页面截图： 网络请求数据：","tags":["工具","开发"]},{"title":"Mac 越狱环境搭建","path":"/2023/05/26/iOS 逆向工程搭建/","content":"MonkeyDev 逆向开发神器： https://github.com/AloneMonkey/MonkeyDev 常见问题1、库缺失报错 123456789`ld: file not found: /usr/lib/libstdc++.dylib``Xcode10`之后废弃了`libstdc++`库。相关的库文件：`libstdc++.6.0.9.dyliblibstdc++.6.dyliblibstdc++.dyliblibstdc++.6.0.9.tbdlibstdc++.6.tbdlibstdc++.tbd` 下载地址： https://github.com/devdawei/libstdc- 1/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib/ 下载完毕进入文件目录执行： 123chmod +x install-xcode_11+.sh./install-xcode_11+.sh 如果没有写入权限，打开系统权限设置,打开 iterm软件开关。 其它解决办法是：删除TargetMonkeyAppDemoDylib Other Linker Flags的一些配置。 2**、运行报错** 解决： Missing file libarclite_iphoneos.a (Xcode 14.3) 1234567891011# Open Terminal and go to the following folder:cd /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/# Create the folder &quot;arc&quot;:# Go to System Preferences → Security &amp; Privacy → Full Disk Access → Terminal, and do:sudo mkdir arccd arcsudo git clone https://github.com/kamyarelyasi/Libarclite-Files.git .# Give the necessary permissions:sudo chmod +x * SSH 认证失败 解决: &#x2F;opt&#x2F;MonkeyDev 修改一下MonkeyDev的打包脚本，修改一下默认端口号 2222. 本地调试使用USB12345678# 安装 usbmuxd 工具brew install usbmuxd# 启动代理设置 10022 本机端口，22 iphone手机端口iproxy 10022:22# 本地ssh链接ssh root@127.0.0.1 -p 10022 Frida 砸壳https://github.com/AloneMonkey/frida-ios-dump iOS 端配置1231. 在越狱设备上，打开 cydia，添加源 `https://build.frida.re`2. 打开添加的源，找出 `frida` 进行安装3. 安装完成后，可在 ssh 终端运行 `frida-ps -U` 查看，是否成功（实测，command not found 应该也不影响后续的使用） MAC 端配置安装 frida-ios-dump 1234567# clone 代码git clone https://github.com/AloneMonkey/frida-ios-dump# cd 到前一步下载的目录 frida-ios-dump# 安装需要的依赖sudo pip install -r requirements.txt --upgrade 电脑和 iOS 设备的端口映射使用 USB 将设备与电脑相连 1234567## SSH证书拷贝ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.26.216.160## 进行映射，在终端输入（其中 `2222` 代表电脑端的端口，22 是 iOS 设备的端口号，如果发现电脑端端口号已被占用，可以使用新的端口号进行映射iproxy 2222 22## 终端显示 `waiting for connection` App砸壳确保 iOS 设备一直保持 USB 连接，并将想要砸壳的应用打开，cd 到之前下载的 frida-ios-dump 目录，终端执行 python3 dump.py -l 可以查看已安装的应用名称和对应的 bundle Id 123456789101112131415161718192021PID Name Identifier---- ------------- ---------------------------4258 App Store com.apple.AppStore3366 AsTools pro rn.notes.best3398 Cydia com.saurik.Cydia3634 Kuaishou com.jiangjia.gif3865 Safari com.apple.mobilesafari3278 Settings com.apple.Preferences - Authenticator com.google.Authenticator - Books com.apple.iBooks - Substitute com.ex.substitute.settings - Tips com.apple.tips - Watch com.apple.Bridge - Weather com.apple.weather - checkra1n kjc.loader - iTunes Store com.apple.MobileStore - unc0ver science.xnu.undecimus - 小红书 com.xingin.discover - 快手极速版 com.kuaishou.nebula - 抖音 com.ss.iphone.ugc.Aweme - 淘宝 com.taobao.taobao4iphone 执行如下命令，对指定的 bundle id 应用进行砸壳。 1python3 dump.py com.taobao.taobao4iphone 砸壳成功，可以在 frida-ios-dump 目录下找到 xxx.ipa 加载所有动态库https://github.com/dengbin9009/DecryptApp https://github.com/TozyZuo/TZLoadAllLibs 1234567891011121314151617181920212223242526## 拷贝 libAllFramework 文件到越狱手机中scp -r -P 2222 libAllFramework.framework root@localhost:~/## 链接越狱手机ssh -p 2222 root@localhost## 查看目录# 淘宝ps -ax | grep Taobao4iPhone 5488 ?? 0:37.26 /var/containers/Bundle/Application/6EFCCBDC-6946-42EA-A323-BF9A15AB872A/Taobao4iPhone.app/Taobao4iPhone5529 ttys000 0:00.01 grep Taobao4iPhone ## 插入我们的动态库DYLD_INSERT_LIBRARIES=libAllFramework.framework/libAllFramework /var/containers/Bundle/Application/6EFCCBDC-6946-42EA-A323-BF9A15AB872A/Taobao4iPhone.app/Taobao4iPhone# 抖音ps -ax | grep Aweme2905 ?? 2:04.99 /var/containers/Bundle/Application/E9B64D44-CE21-470C-A9F7-A0682E81B1C4/Aweme.app/Aweme 2949 ttys000 0:00.02 grep Aweme## 抖音DYLD_INSERT_LIBRARIES=libAllFramework.framework/libAllFramework /var/containers/Bundle/Application/E9B64D44-CE21-470C-A9F7-A0682E81B1C4/Aweme.app/Aweme# 执行Dumppython3 dump.py com.taobao.taobao4iphonepython3 dump.py com.ss.iphone.ugc.Aweme 如何判断 ipa 是否有壳 123451. 将 ipa 文件后缀改为 zip 进行解压2. 找到 xxx.app 包内容下的 xxx 二进制可执行文件3. 在终端执行 `otool -l xx | grep crypt`4. 找到 `cryptid` 这一行，有壳为 1，已脱壳为 0如果能成功走到这一步，恭喜，砸壳成功啦 其它方式1使用软件 CrackerXI 砸壳工具 手动安装12345# 安装dpkg -i com.nablac0d3.sslkillswitch2_0.14.deb# 如果安装 SpringBoard 没自动重启，手动重启killall -HUP SpringBoard","tags":["工具","开发","iOS"]},{"title":"iPhone7Plus iOS15越狱","path":"/2023/05/25/iOS iPhone7Plus 越狱/","content":"首先需要按照机芯以及系统版本找到对应的越狱工具，目前手上有个 iPhone7Plus机子正好拿来练练。 本文使用 palera1n 越狱工具： **** 官网地址： palera1n 工具下载地址： https://github.com/palera1n/palera1n/releases/tag/v2.0.0-beta.6.2 按照自己的平台下载对应的工具，我这边是Mac系统，所以下载 palera1n-macos-universal 这个。 开始越狱：按照官方官方WiKi操作： Installing palera1n | iOS Guide 按照步骤一步一步操作就可以 12345678910111213141516171819202122231. Installing palera1nEnable Full Disk Access for Terminal (this only has to be done once)macOS Monterey and below: System Preferences → Security &amp; Privacy → Privacy → Full Disk AccessmacOS Ventura and above: System Settings → Privacy &amp; Security → Full Disk AccessIf Terminal does not show up in the list, click the plus icon and select it from Applications → Utilities.2. If you are on macOS Monterey 12.2.1 or below, run the following commands (this only has to be done once):sudo python -m ensurepipsudo python -m pip install setuptools xattr==0.6.43. Open a terminal window and cd to the directory that palera1n was downloaded to (usually cd ~/Downloads).4. Run sudo mkdir -p /usr/local/bin5. Run sudo mv ./palera1n-macos-universal /usr/local/bin/palera1nReplace ./palera1n-macos-universal with whatever version you downloaded6. Run sudo xattr -c /usr/local/bin/palera1n7. Run sudo chmod +x /usr/local/bin/palera1n 开始越狱： 注意⚠️，手机需要直接链接电脑，不能用扩展hub链接。 按照提示插入手机，会有相应的提示操作，按照提示信息让手机进入恢复模式（电源按键+音量减键同时按住）等待信息提示后，下一步松开电源按键继续按住音量减键。后面会自动执行越狱操作。 手机会自动重启，完成后屏幕出现 palera1n应用表示越狱成功。 辅助网站 插件查询 https://www.iggxx.com/?golink=aHR0cHM6Ly93d3cuaW9zLXJlcG8tdXBkYXRlcy5jb20= 兼容性查询 https://www.iggxx.com/?golink=aHR0cHM6Ly9qbGlwcG9sZC5naXRodWIuaW8vdHdlYWtDb21wYXRpYmxl 更新推送频道 https://www.iggxx.com/?golink=aHR0cHM6Ly90Lm1lL0phaWxicmVha19Ud2Vha3M= Cydia 源地址 Cydia贴吧源（推荐） https://apt.cydiaba.cn S中文源 https://apt.sunbelife.com 雷锋源(推荐) https://apt.abcydia.com 知网少年源 https://apt.iphoneba.cn FCydia蜂巢源 https://apt.fcydia.com ppsspp模拟器源码 https://cydia.ppsspp.org Keevi源 https://apt.keevi.cc Karen’s Repo https://cydia.angelxwind.net 蚂蚁源中文源 https://apt.cydia.pro 越狱推送源 https://apt.cydiavip.com Packix源 https://repo.packix.com junesiphone.com源 https://junesiphone.com/supersecret/ Evelyn’s Collection源 https://evynw.github.io Dynastic Repo源 https://repo.dynastic.co Bingner源 https://apt.bingner.com/ 多米诺骨牌源 https://apt.wxhbts.com/ Clezz源 https://apt.wxhbts.com/ Cydia(氵刀八木) https://aptso.cn/misc CydiaKK中文源 https://apt.cydiakk.com Chariz • https://repo.chariz.io/ Dynastic • https://repo.dynastic.co/ Packix • https://repo.packix.com/ BigBoss • http://apt.thebigboss.org/repofiles/cydia/ 越狱插件 Battery Health Enable 解决更换电池健康度显示问题 https://poomsmart.github.io/ Bakgrunnur 真实后台 https://udevsharold.github.io/repo/ OTAEnabler 恢复系统更新 https://repo.alexia.lol/ CrashReporter 崩溃报告 https://cokepokes.github.io/ Appstore++ 应用降级 https://cokepokes.github.io/ CrackerXI 砸壳工具 https://cydia.iphonecake.com/ Xenhtml &amp; Xeninfo http://junesiphone.com/supersecret/ shuffle 设置归类 https://creaturesurvive.github.io/repo/ Shortmoji 键盘增强 https://miro92.com/repo/ H2 数字2系列插件作者源 https://lzsxcl.github.io/repo/ AudioRecorder XS 通话录音 http://limneos.net/repo/ Sylph 锁屏音乐界面自定义 https://repo.daus.ch/ ReProvision Reborn 自签工具 https://repo.packix.com/ AppSync Unified 安装未签名的第三方 app https://cydia.akemi.ai/ Apple File Conduit “2” 激活PC端的所有路径访问权限 https://cydia.ichitaso.com/ iCleaner Pro 系统清理 https://ib-soft.net/ Filza 文件管理 https://www.tigisoftware.com/default/?page_id=475 Flex3 插件库 http://getdelta.co/ MTerminal 命令终端 FlyJB 屏蔽越狱检测 injectipa 一键注入插件 SemiRestore11 系统平刷 http://xnu.science/repo/ Succession 系统平刷 https://samgisaninja.github.io/test/ Zebra 斑马越狱商店 https://getzbra.com/ Installer 5 越狱商店 https://apptapp.me/repo/ Sileo 越狱商店 https://getsileo.app/","tags":["工具","开发","iOS"]},{"title":"PVE GPU直通","path":"/2023/03/10/PVE GPU直通/","content":"1234567891011121314151617181920212223242526272829303132333435363738nano /etc/default/grubGRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on iommu=pt i915.enable_gvt=1 initcall_blacklist=sysfb_init pci=assign-busses pcie_acs_override=downstream,multifunction&quot;update-grubnano /etc/modulesvfiovfio_iommu_type1vfio_pcivfio_virqfd// 如不显示，则硬件设备不支持，可以使用以下命令允许不安全的中断echo &quot;options vfio_iommu_type1 allow_unsafe_interrupts=1&quot; &gt; /etc/modprobe.d/iommu_unsafe_interrupts.conf// 如果是N卡还需要加入下面的配置到kvm.confecho &quot;options kvm ignore_msrs=1 report_ignored_msrs=0&quot; &gt; /etc/modprobe.d/kvm.conf// blacklistecho &quot;blacklist radeon&quot; &gt;&gt; /etc/modprobe.d/pve-blacklist.confecho &quot;blacklist nouveau&quot; &gt;&gt; /etc/modprobe.d/pve-blacklist.confecho &quot;blacklist nvidia&quot; &gt;&gt; /etc/modprobe.d/pve-blacklist.conf// 为显卡含子设备的 id 开启 VFIOlspci -vlspci -n -s 03:0003:00.0 0300: 1002:731f (rev c1)03:00.1 0403: 1002:ab38lspci -n -s 00:0200:02.0 0380: 8086:9bc5 (rev 05)echo &quot;options vfio-pci ids=1002:731f,1002:ab38 disable_vga=1&quot;&gt; /etc/modprobe.d/vfio.confupdate-initramfs -ureboot// confignano /etc/pve/qemu-server/101.confqm set 102 -args &quot;host,-hypervisor,+kvm_pv_unhalt,+kvm_pv_eoi,hv_spinlocks=0x1fff,hv_vapic,hv_time,hv_reset,hv_vpindex,hv_runtime,hv_relaxed,kvm=off,hv_vendor_id=intel&quot;qm set 102 -balloon &quot;0&quot; vGPU 远程桌面优化设置配置 RemoteFX 硬件加速此时，该虚拟机虽然有了核显 vGPU ，但是远程桌面连接并未使用，我们需要手动在该虚拟机开启 RemoteFX 硬件加速，使远程桌面连接通过 WDDM 调用核显 vGPU 实例[14]。 打开命令提示符，输入 gpedit.msc 开启组策略，在左侧依次进入【计算机配置】——【管理模板】——【Windows组件】——【远程桌面服务】——【远程桌面会话主机】——【远程会话环境】。 然后，如下图所示进行设置： 继续打开【RemoteFX for Windows Server 2008 R2】，按下图设置： 注意：有一些项目在左下角可以设置具体的选项，如【使用 RemoteFX 时优化视觉体验】，可以选择最高。 另外，我们回到上上一级菜单的【连接】——【选择 RDP 传输协议】，按图设置： 这么做可以让大部分流量以 UDP 传输 全部配置完成后，在命令提示符输入 gpupdate &#x2F;force 以刷新组策略 到此，核显虚拟机配置完成。 需要补充的是，此后通过远程桌面连接这台虚拟机时，要将体验设置为 LAN ： 常见问题由于Vega和Navi GPU缺少Function Level Reset(FLR)的支持，会导致虚拟机关机后显卡睡死而无法重新启动虚拟机。解决方法是卸载显卡和板载声卡后，休眠物理机，然后重新扫描pcie设备，可以制作如下脚本： 1234echo &quot;1&quot; &gt; /sys/bus/pci/devices/0000\\:03\\:00.0/removeecho &quot;1&quot; &gt; /sys/bus/pci/devices/0000\\:03\\:00.1/removeecho mem &gt; /sys/power/stateecho &quot;1&quot; &gt; /sys/bus/pci/rescan 在第三行执行后虚拟机会进入休眠，此时需要手动按下开关恢复运行，这对运维有了一定的阻碍。另一个方法是给kernel打补丁，链接留在这里本文暂不展开。 https://zhuanlan.zhihu.com/p/636283122https://forum.level1techs.com/t/navi-reset-kernel-patch/147547PVE虚拟机核显直通及返回钩子脚本LabradorsProxmox VE(PVE)直通显卡 踩坑经验 - 企鹅大大的博客一边原神一边 galgame ：同时独显直通和核显虚拟化","tags":["Proxmox","软路由"]},{"title":"华硕AC-88U OpenWrt系统安装","path":"/2022/12/18/华硕AC-88U OpenWrt系统安装/","content":"家里有一个 华硕 AC-88U 路由器闲置，准备给老人家里使用，想着也方便科学的上网就准备刷个系统更新一下。网上看到 AC-88U 路由器支持了 OpenWrt 系统于是就尝试刷一下试试。 刷系统首先到以下这个网址去在线编译一个对应系统的 OpenWrt系统，相关插件根据自身需要自行选择。 OpenWrt固件下载与在线定制编译 下载好后系统后开始重制 华硕 AC-88U 路由器，通过 LAN 口网线与电脑连接，开机前一直按住Reset键，等电源指示灯开始闪烁后松开Reset键。然后在浏览器上输入：192.168.50.1，进入CFE miniWeb Server.界面： 选择 restore NVRAM 选项，完成后，在悬着 Choose File 按钮选择刚才下载的固件，然后点击 Upload 按钮上传，一直等待完成会出现如下页面变化。 路由器重启后，电脑设置本地IP地址：10.0.0.9 ，子网掩码：255.255.255.0 完成后，访问： 10.0.0.1 网址进入新的系统管理后台。 进入后台，设置相关的基础配置，DHCP服务，WiFi 设置等。 Q&amp;A 5G WiFi 为啥没有搜索到？ 把5G信号区域切换到中国地区，信道更换为 60。 为啥插件选了很多，但是刷完机子后没有看到？ 固件的大小不要超过路由器本身的 Flash 存储大小，AC-88U 是125MB。 其他 京东云AX1800 Pro亚瑟R2242免拆刷机https://www.bilibili.com/read/cv34442695/https://phyng.com/2024/05/05/ax1800-openwrt.htmlhttps://www.bilibili.com/read/cv21409975/?spm_id_from=333.976.0.0https://www.bilibili.com/read/cv34316745/?spm_id_from=333.976.0.0#reply220875495696https://zhuanlan.zhihu.com/p/698040858https://mbd.pub/o/bread/ZJeXk59v?next=pay&amp;author_name=coolsnowwolf&amp;author_avatar=https%3A%2F%2Favatar.niucodata.com%2Fbeam%2F50%2F2061237&amp;follow_author=1 相关连接RT-AC68U刷OpenWrt或DD-WRT - 路由智态 【搬运】github的RT-AC88U OpenWrt固件-asus华硕无线路由器及网络设备-恩山无线论坛","tags":["工具","软路由"]},{"title":"Docker 中部署青龙面板","path":"/2022/12/16/Docker 中部署青龙面板/","content":"青龙面板是一个支持python3、javaScript、shell、typescript 的定时任务的管理面板。 项目地址： https://github.com/whyour/qinglong Docker 安装12345678docker run -dit \\ -v /opt/docker/qinglong/data:/ql/data \\ -p 8088:5700 \\ -e TZ=Asia/Shanghai \\ --name qinglong \\ --hostname qinglong \\ --restart unless-stopped \\ whyour/qinglong:latest 安装好之后直接打开：http://localhost:8088 后进行初始化设置。 依赖环境设置NodeJs 依赖如下 12345678910111213141516171819202122momentcrypto-jsprettytabledotenvjsdomdate-fnstough-cookietslibws@7.4.3ts-md5jsdom -gjiebafsform-datajson5global-agentpng-js@types/noderequiretypescriptjs-base64axios Python3 依赖如下 1234requestscanvasping3jieba 添加订阅任务下图指的位置必须要填写的，一个名称，连接，后面会给出，首次填写会按照平台的命令格式自动填充一些字段，完成后需要手动删除首次填写的内容，定时规则需要自己填写自己的要求，格式为cron表达式 京东脚本库汇总1234567891011121314151617181920212223242526272829303132333435# Faker2 有助力池 250+ql repo https://github.com/shufflewzc/faker2.git &quot;jd_|jx_|gua_|jddj_|jdCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql|JDSignValidator&quot; &quot;main&quot;# Faker3 无助力池 260+ql repo https://github.com/shufflewzc/faker3.git &quot;jd_|jx_|gua_|jddj_|jdCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql|JDSignValidator&quot; &quot;main&quot;# gys619/Absinthe （集合库）340+ql repo https://github.com/gys619/Absinthe.git &quot;jd_|jx_|jddj_|gua_|getJDCookie|wskey&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|utils|ZooFaker_Necklace|JDJRValidator_|sign_graphics_validate|jddj_cookie|function|ql|magic|JDJR|JD&quot; &quot;main&quot;# KingRan/KR （集合库）130+ql repo https://github.com/KingRan/KR.git &quot;jd_|jx_|jdCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|utils|function|sign|sendNotify|ql|JDJR&quot;# 6dylan6/jdpro （集合库）90+ql repo https://github.com/6dylan6/jdpro.git &quot;jd_|jx_|jddj_&quot; &quot;backUp&quot; &quot;^jd[^_]|USER|JD|function|sendNotify&quot;# 小埋yyds仓库(带助力池) 170+ql repo https://github.com/okyyds/yyds.git &quot;jd_|jx_|gua_|jddj_|jdCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql|JDSignValidator&quot; &quot;master&quot;# 小埋yydspure仓库(不带助力池) 160+ql repo https://github.com/okyyds/yydspure.git &quot;jd_|jx_|gua_|jddj_|jdCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql|JDSignValidator&quot; &quot;master&quot;# zero205/JD_tencent_scf 80+ql repo https://github.com/zero205/JD_tencent_scf.git &quot;jd_|jx_|jdCookie&quot; &quot;backUp|icon&quot; &quot;^jd[^_]|USER|sendNotify|sign_graphics_validate|JDJR|JDSign|ql&quot; &quot;main&quot;# chinnkarahoi 无维护 原版 70+ql repo https://github.com/chinnkarahoi/jd_scripts.git &quot;jd_|jx_|getJDCookie&quot; &quot;activity|backUp|Coupon&quot; &quot;^jd[^_]|USER&quot;# he1pu 110+ql repo https://github.com/he1pu/JDHelp.git &quot;jd_|jx_|getJDCookie&quot; &quot;activity|backUp|jd_delCoupon&quot; &quot;^jd[^_]|USER&quot;# ccwav大佬的通知增强版和CK检测ql repo https://github.com/ccwav/QLScript2.git &quot;jd_&quot; &quot;NoUsed&quot; &quot;ql|sendNotify&quot;# smiek2121开卡ql repo https://github.com/smiek2121/scripts.git &quot;gua_&quot; &quot;&quot; &quot;ZooFaker_Necklace.js|JDJRValidator_Pure.js|sign_graphics_validate.js|cleancart_activity.js|jdCookie.js|sendNotify.js&quot; 常用定时规则cron表达式123456789101112131415161718192021222324252627282930313233343536373839404142# 表示在每月的1日的凌晨2点调整任务0 0 2 1 * ?# 表示周一到周五每天上午10:15执行作业0 15 10 ? * MON-FRI# 表示2002-2006年的每个月的最后一个星期五上午10:15执行作0 15 10 ? 6L 2002-2006# 每天上午10点，下午2点，4点0 0 10,14,16 * * ?# 朝九晚五工作时间内每半小时0 0/30 9-17 * * ?# 表示每个星期三中午12点0 0 12 ? * WED# 每天中午12点触发0 0 12 * * ?# 每天上午10:15触发0 15 10 ? * *# 每天上午10:15触发0 15 10 * * ?# 2005年的每天上午10:15触发0 15 10 * * ? 2005# 在每天下午2点到下午2:59期间的每1分钟触发0 * 14 * * ?# 在每天下午2点到下午2:55期间的每5分钟触发0 0/5 14 * * ?# 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发0 0/5 14,18 * * ?# 在每天下午2点到下午2:05期间的每1分钟触发0 0-5 14 * * ?# 每年三月的星期三的下午2:10和2:44触发0 10,44 14 ? 3 WED# 周一至周五的上午10:15触发0 15 10 ? * MON-FRI# 每月15日上午10:15触发0 15 10 15 * ?# 每月最后一日的上午10:15触发0 15 10 L * ?# 每月的最后一个星期五上午10:15触发0 15 10 ? * 6L# 2002年至2005年的每月的最后一个星期五上午10:15触发0 15 10 ? * 6L 2002-2005# 每月的第三个星期五上午10:15触发0 15 10 ? * 6#3 京东Cookie获取电脑上登录，m.jd.com 网站，选择手机号与密码登录，有个比较麻烦的点就是京东的手势验证码验证成功比较麻烦，多试几次可以成功。登录成功打开开发者调试工具然后根据下图找到对应的，pt_key 值以及 pt_pin 的值 复制出来。 拿到值后按照 pt_key=xxxxxxxxxxxxxxxxxxxxxxxxxxxx;pt_pin=xxxxxxxx; 这个格式拼装一下，然后把这个值填入到青龙面板中，到青龙面板中添加环境变量选项，添加变量设置（可添加多个Cookie），多个账号换行填写。 相关连接卷生活九二零-分享精品资源技巧便利空间","tags":["工具","Mac"]},{"title":"Mac Alfred 常用插件推荐","path":"/2022/12/14/Mac Alfred 插件推荐/","content":"我常用的 Alfred workflow 列表推荐 CodeVar CodeVar 生成变量名，支持大小驼峰、常量、下划线，开发者必备的工作流 下载地址：https://github.com/xudaolong/CodeVar Encode &#x2F; Decode Base64 编解码 下载地址：https://github.com/willfarrell/alfred-encode-decode-workflow Fakeum 生成各种假数据，比如姓名，城市，银行卡号等等 下载地址：https://github.com/deanishe/alfred-fakeum Github 快速查找项目 &#x2F; 用户 下载地址：https://github.com/gharlan/alfred-github-workflow Hash 支持各种 hash 算法的计算 下载地址：https://github.com/willfarrell/alfred-hash-workflow Http Status Codes 快速显示 http 状态码含义 下载地址：https://www.packal.org/workflow/http-status-codes IP Address 快速查询本地 ip 和公网出口 ip，再也不用到 ipip.net 上去查询了 下载地址：https://github.com/zenorocha/alfred-workflows/raw/master/ip-address/ip-address.alfredworkflow Kill Process 杀进程，不知道怎么处理卡死的程序？那就用 kill process 吧 下载地址：https://github.com/nathangreenstein/alfred-process-killer Microsoft ToDo 奇妙清单的升级版本就是 Microsoft ToDo 了，这个工作量可以快速记录 todo 事项 下载地址：https://github.com/johandebeurs/alfred-mstodo-workflow Password Generator 快速生成各种复杂度的密码，总有一款密码适合你 下载地址：https://github.com/deanishe/alfred-pwgen Terminal Finder Mac 上终端的目录并不像 windows 那么好找到，经常使用终端的开发者需要快速打开当前路径所在的 finder 目录 下载地址：https://github.com/LeEnno/alfred-terminalfinder Wechat Plugin Mac 版本的微信客户端插件，支持多种配色方案。支持微信多开以及 小程序 查看，还有消息防撤回功能。 微信插件分享就不贴图了，自行探索 Youdao Translate 快速有道翻译，再也不用打开网页去查翻译结果了 下载地址：https://github.com/wensonsmith/YoudaoTranslate Lock (自带的功能) 锁定屏幕 Alfred workflow 合集：地址: https://github.com/zenorocha/alfred-workflows","tags":["工具","Mac"]},{"title":"MacOS Ventura U盘安装","path":"/2022/12/09/Mac系统U盘安装/","content":"首先下载MacOS 系统通过系统自带的商店，搜素mac 系统并下载 或者通过开源社区大佬提供的 MacOS 系统下载工具下载。https://github.com/ninxsoft/Mist系统下载完成后需要准备一个大于16G的U盘，名字命名为 ‘’MacOS’ 使用系统磁盘工具格式化如图中所示的系统格式。 格式完成之后直接打开命令提示窗口输入如下命令，并且输入电脑锁屏密码。 1sudo /Applications/Install\\ macOS\\ Ventura.app/Contents/Resources/createinstallmedia --volume /Volumes/MacOS 漫长的等待后提示100%，表示U 盘写入完成，完后进行安装系统操作。 12345678910➜ ~ sudo /Applications/Install\\ macOS\\ Ventura.app/Contents/Resources/createinstallmedia --volume /Volumes/MacOSPassword:Ready to start.To continue we need to erase the volume at /Volumes/MacOS.If you wish to continue type (Y) then press return: yErasing disk: 0%... 10%... 20%... 30%... 100%Making disk bootable...Copying to disk: 0%... 10%... 20%... 30%... 40%... 50%... 60%... 70%... 80%... 90%... 100%Install media now available at &quot;/Volumes/Install macOS Ventura&quot;➜ ~ 安装系统提示：重装系统前备份Mac里重要资料 Apple 芯片（适用于M1和后续苹果自家芯片） 将 Mac 开机并继续按住电源按钮，直到看到启动选项窗口，其中会显示可引导盘。 选择U盘启动，然后按“继续”。 macOS 安装器打开后，按照屏幕上的说明操作即可。 Intel 处理器 将 Mac 开机或重新启动后，立即按住 Option (Alt) ⌥ 键。 当看到出现启动菜单选项时，松开 Option 键。 选择U盘启动盘，按下回车。（如果无法从可引导安装器启动，需要确认“启动安全性实用工具”中的“外部启动”设置已设为允许从外部介质启动） 根据提示选择语言。 从“实用工具”窗口中选择“安装 macOS” 然后按“继续”，并按照屏幕上的说明进行操作即可。","tags":["工具","Mac"]},{"title":"PVE安装HomeAssistant","path":"/2022/10/25/PVE 安装 HomeAssistant/","content":"在家庭中搭建 HomeAssistant 智能管理系统。 安装：网上有很详细的教程了，参考后安装。 智能家居 篇一：【手把手教你】Proxmox VE（PVE）安装HomeAssistant_虚拟服务_什么值得买 设置：推荐一下几篇文章，先按照步骤安装与设置。 笔记（三）Home Assistant配置（基础组件、HACS）_SameWorld的博客-CSDN博客_homeassistant 配置 笔记（四）Home Assistant添加小米设备_SameWorld的博客-CSDN博客_homeassistant添加小米设备 笔记（五）Home Assistant Lovelace UI基本用法_SameWorld的博客-CSDN博客_homeassistant ui 功能：天气插件 - OpenWeatherСurrent weather and forecast - OpenWeatherMap 注册账号后，打开 api.openweathermap.org 这个网址查看个人的 APIKey。 打开 https://www.home-assistant.io/integrations/openweathermap/ 网址点击添加HA， 插件 这个会直接跳转到本地的HA页面，并唤起添加插件选框。（前提需要配置本地的HA地址链接） 成功后会在集成列表中显示如下： 这个成功后就可以在看板中添加天气看板了：","tags":["Proxmox","软路由"]},{"title":"PVE Automate With Ansible","path":"/2022/10/10/PVE Automate With Ansible/","content":"12sudo apt install software-properties-commonapt install ansible 1ansible -i ./inventory/hosts ubuntu -m ping --user someuser --ask-pass 12ansible-playbook ./playbooks/apt.yml --user root --ask-pass --ask-become-pass -i ./inventory/hostsansible-playbook ./playbooks/apt.yml --user root -i ./inventory/hosts InstructionsChoose your Ubuntu Cloud Image Download Ubuntu (replace with the url of the one you chose from above) 1wget &lt;https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img&gt; Create a new virtual machine 1qm create 8000 --memory 2048 --core 2 --name ubuntu-cloud --net0 virtio,bridge=vmbr0 Import the downloaded Ubuntu disk to local-lvm storage 1qm importdisk 8000 focal-server-cloudimg-amd64.img local-lvm Attach the new disk to the vm as a scsi drive on the scsi controller 1qm set 8000 --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-8000-disk-0 Add cloud init drive 1qm set 8000 --ide2 local-lvm:cloudinit Make the cloud init drive bootable and restrict BIOS to boot from disk only 1qm set 8000 --boot c --bootdisk scsi0 Add serial console 1qm set 8000 --serial0 socket --vga serial0 DO NOT START YOUR VM Now, configure hardware and cloud init, then create a template and clone. If you want to expand your hard drive you can on this base image before creating a template or after you clone a new machine. I prefer to expand the hard drive after I clone a new machine based on need. Create template. Clone template. 1qm clone 8000 135 --name yoshi --full TroubleshootingIf you need to reset your machine-id 12sudo rm -f /etc/machine-idsudo rm -f /var/lib/dbus/machine-id Then shut it down and do not boot it up. A new id will be generated the next time it boots. If it does not you can run: 1sudo systemd-machine-id-setup OpenWrt 重定向保护 本文由 简悦 SimpRead 转码， 原文地址 docs.technotim.live Documentation for Techno Tim YouTube videos for all your copy pasta needs! Today, we’re going to use SSL for everything. No more self-sign certs. No more http. No more hosting things on odd ports. We’re going all in with SSL for our internal services and our external services too. We going to set up a reverse proxy using Traefik, Portainer, and use that to get wildcard certificates from Let’s Encrypt. Join me and let’s secure all the things. Watch Video See all the hardware I recommend at https://l.technotim.live/gear Don’t forget to check out the 🚀Launchpad repo with all of the quick start source files. Docker SetupSee this post on how to install docker and docker-compose Traefik12345678mkdir traefikcd traefikmkdir datacd datatouch acme.jsonchmod 600 acme.jsontouch traefik.yml traefik.yml can be found here create docker network 12docker network create proxy 12touch docker-compose.yml docker-compose.yml can be found here 123cd datatouch config.yml Portainer12345mkdir portainercd portainertouch docker-compose.ymlmkdir data docker-compose.yml can be found here Generate Basic Auth Password123sudo apt updatesudo apt install apache2-utils 12echo $(htpasswd -nb &quot;&lt;USER&gt;&quot; &quot;&lt;PASSWORD&gt;&quot;) | sed -e s/\\\\\\\\$/\\\\\\\\$\\\\\\\\$/g NOTE: Replace &lt;USER&gt; with your username and &lt;PASSWORD&gt; with your password to be hashed. Paste the output in your docker-compose.yml in line (traefik.http.middlewares.traefik-auth.basicauth.users=&lt;USER&gt;:&lt;HASHED-PASSWORD&gt;) Spin up the containerTraefik Routes Config123cd traefik/datanano config.yml config.yml here 12docker-compose up -d --force-recreate Your folder structure should look like the below, if you are following along with the example. But feel free to make it however you wish just keep in mind you’ll need to change the location in the corresponding files. 1234567./traefik├── data│ ├── acme.json│ ├── config.yml│ └── traefik.yml└── docker-compose.yml","tags":["Proxmox","软路由"]},{"title":"Python 脚本整理DSM备份的照片","path":"/2022/10/06/使用脚本整理DSM备份的照片/","content":"使用群晖DSM系统来备份我们的照片和视频是非常方便的一件事情，但是有些时候，个人的电子设备越来越多，备份后的照片目录也越来越多，有些时候手动导入一些资源后也使得后面整理起来比较麻烦。到一定时间后再去整理和归档相关备份的资料就是一个重复和机械的操作。 群晖DSM系统对于照片和视频的归档方式是按照时间年份以及月份去归档备份资料的，对于这种方式个人觉得比较简单好用，最近正好在整理自己的照片与视频备份，于是写了一个 python 脚本来处理这个重复的工作。 基本逻辑： 读取一个目录下的所有文件，解析图片和视频中的拍摄信息，按照年月进行从命名以及归档操作，值得说明一点的是苹果特有的HEIC图片格式需要单独的处理。 Python脚本：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206# https://pypi.org/project/pyheif/# macos# brew install libffi libheif# linux# apt install libffi libheif-dev libde265-dev# yum install libffi libheif-devel libde265-devel# pip install git+https://github.com/carsales/pyheif.git# pip3 install exifread whatimage pyheif Pillow piexifimport osimport ioimport reimport timeimport shutilimport exifreadimport whatimageimport pyheifimport piexiffrom PIL import Imagefrom types import coroutine# 苹果 HEIC 图片转换成 JPEGdef heic_to_jpg(heic_img_path): with open(heic_img_path, &#x27;rb&#x27;) as f: heic_img = f.read() img_format = whatimage.identify_image(heic_img) print(&#x27;heic_to_jpg&#x27;, img_format) if img_format in [&#x27;heic&#x27;, &#x27;heif&#x27;]: img = pyheif.read_heif(heic_img) pi = Image.frombytes(mode=img.mode, size=img.size, data=img.data) pi.save(heic_img_path[:-5]+&quot;.jpg&quot;, format=&quot;jpeg&quot;)# get_file_datedef get_file_date(filepath, format): &#x27;&#x27;&#x27; 获取文件的时间戳,这里主要返回视频的时间，原时间一般为修改时间 st_atime (访问时间), st_mtime (修改时间), st_ctime（创建时间） &#x27;&#x27;&#x27; statinfo = os.stat(filepath) temp_time = time.localtime(statinfo.st_mtime) return time.strftime(format, temp_time)# get_exif_datedef get_exif_date(filepath): # 获取照片的拍摄日期，利用exifread模块 FIELD = &#x27;EXIF DateTimeOriginal&#x27; fd = open(filepath, &#x27;rb&#x27;) tags = exifread.process_file(fd) fd.close() if FIELD in tags: temp_time = str(tags[FIELD]) new_time = temp_time.replace(&#x27;:&#x27;, &#x27;&#x27;).replace(&#x27; &#x27;, &#x27;_&#x27;) return new_time else: new_time = &#x27;&#x27; return new_time# get_heic_exif_datedef get_heic_exif_date(filepath): with open(filepath, &#x27;rb&#x27;) as f: heic_img = f.read() img_format = whatimage.identify_image(heic_img) temp_time = &quot;&quot; print(&#x27;heic_to_jpg&#x27;, img_format) if img_format in [&#x27;heic&#x27;, &#x27;heif&#x27;]: img = pyheif.read_heif(heic_img) for metadata in img.metadata or []: if metadata[&#x27;type&#x27;] == &#x27;Exif&#x27;: # DATETIME 36867 时间 # DATETIMEDIGITIZED 36868 # LENSMAKE 42035 # GPSLONGITUDE 0000 经度 # GPSLATITUDE 0000 维度 FIELD = 36867 exif_dict = piexif.load(metadata[&#x27;data&#x27;]) exif_dict = exif_dict[&#x27;Exif&#x27;] temp_time = (exif_dict[FIELD]).decode(&#x27;utf-8&#x27;) print(&quot;时间: &quot; + temp_time) # for key in exif_dict.keys(): # print(&quot;exif Key: &quot; + str(key) + &quot; value: &quot;+ str(exif_dict[key])) new_time = temp_time.replace(&#x27;:&#x27;, &#x27;&#x27;).replace(&#x27; &#x27;, &#x27;_&#x27;) return new_time# get_filetypedef get_filetype(basename): &#x27;&#x27;&#x27; 利用正则表达式判断文件后缀，照片返回0，视频返回1，其他返回2 &#x27;&#x27;&#x27; img_reg = r&#x27;(\\.JPG|\\.jpg|\\.JPEG|\\.jpeg|\\.BMP|\\.bmp|\\.PNG|\\.png)&#x27; vedio_reg = r&#x27;(\\.MP4|\\.mp4|\\.MOV|\\.mov)&#x27; if re.search(img_reg, basename): # 匹配照片 return 0 elif re.search(vedio_reg, basename): # 匹配视频 return 1 else: if re.search(r&#x27;(\\.HEIC|\\.heic|\\.HEIF|\\.heif)&#x27;, basename): # 匹配HEIC照片 return 2 else: return 3# rename_filenamedef rename_filename(path, filename, format): filepath = os.path.join(path, file_name) newname = filename print(&quot;当前文件: &quot; + filepath) # 过滤不必要的文件夹 if filename == &quot;.DS_Store&quot;: return num = get_filetype(filename) # 判定文件类型 # 获取文件时间 if num == 0: exif_time = str(get_exif_date(filepath)) # 获取照片拍摄时间 if exif_time != &#x27;&#x27;: str_time = exif_time else: str_time = str(get_file_date(filepath, format)) # 获取文件的修改时间 elif num == 1: str_time = str(get_file_date(filepath, format)) elif num == 2: exif_time = str(get_heic_exif_date(filepath)) # 获取照片拍摄时间 if exif_time != &#x27;&#x27;: str_time = exif_time else: str_time = str(get_file_date(filepath, format)) # 获取文件的修改时间 else: print(&quot;- 文件格式不正确！&quot;) return newname # 重命名 file_suffix = os.path.splitext(filename)[1] # 后缀名 try: newname = str_time+file_suffix os.rename(filepath, os.path.join(path, newname)) print(filename + &quot; newname: &quot; + newname + &#x27; 重命名成功！&#x27;) except Exception as e: if e.args[0] == 17: # 重名 newname = str_time+&#x27;-1&#x27;+file_suffix os.rename(filepath, os.path.join(path, newname)) else: print(e) return newname# move_filedef move_file(path, file_name, todir): if file_name == None: return oldpath = os.path.join(path, file_name) new_dir = os.path.join(todir, &quot;/Other&quot;) try: new_dir = os.path.join(todir, file_name[:4] + &quot;/&quot; + file_name[4: 6]) except Exception as e: print(&quot;Exception: &quot; + e) if not os.path.exists(new_dir): os.makedirs(new_dir) # if not os.path.exists(file_name): # #调用系统命令行来创建文件 # os.system(r&quot;touch &#123;&#125;&quot;.format(path)) newpath = os.path.join(new_dir, file_name) shutil.move(oldpath, newpath) print(&quot;移动文件：&quot; + newpath)# move_filedef simple_move_file(path, file_name, todir): if file_name == &quot;.DS_Store&quot;: return else: shutil.move(os.path.join(path, file_name), os.path.join(todir, file_name))# 获取所有子目录def get_allsubdir(path): print(&quot;所有子目录: &quot;) g = os.walk(path) for path, dir_list, file_list in g: for dir_name in dir_list: print(os.path.join(path, dir_name))# 获取所有文件def get_allfiles(path): print(&quot;所有文件: &quot;) g = os.walk(path) for path, dir_list, file_list in g: for file_name in file_list: print(os.path.join(path, file_name))# mainif __name__ == &quot;__main__&quot;: fromdir = &#x27;/Users/vvusu/Downloads&#x27; todir = &#x27;/Volumes/homes/suixin/Photos/MobileBackup/Sue/Other&#x27; # 时间格式 format = &#x27;%Y%m%d_%H%M%S&#x27; print(&quot;时间格式: &quot; + format) g = os.walk(fromdir) print(&quot;所有文件: &quot;) for path, dir_list, file_list in g: for file_name in file_list: new_name = rename_filename(path, file_name, format) # move_file(path, new_name, todir) # simple_move_file(path, file_name, todir) Python脚本运行： 整理之前的目录： 整理之后的目录：","tags":["工具","Python"]},{"title":"Mac 开发环境基础配置","path":"/2022/10/05/Mac 开发环境基础配置/","content":"Install HomeBrew1/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; Install some software123456789101112curl -L https://get.rvm.io | bash -s stablebrew install nvmbrew install nodebrew install pythonbrew install go@1.19brew install mackupbrew install ansiblebrew install cocoapodsbrew install automakebrew install libtoolbrew install protobufbrew install maven Install iTerm2安装后快捷键 command + d 新增一个窗口。基于当前窗口路径打开新的窗口，一个配置记得修改 iTerm2 =&gt; Preferences =&gt; Profiles =&gt; Working Directory 选中☑️ Reuse previous session&#39;s directory thems: https://github.com/mbadolato/iTerm2-Color-Schemes Install [oh my zsh](https://ohmyz.sh/#install)1sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; thems: https://github.com/ohmyzsh/ohmyzsh/wiki/themes 123vim ~/.zshrc// 修改主题ZSH_THEME=&quot;主题名称&quot; plugins: 123# 插件安装git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting 123456789101112131415# Would you like to use another custom folder than $ZSH/custom?ZSH_CUSTOM=$HOME/.oh-my-zsh/custom# Which plugins would you like to load?# Standard plugins can be found in $ZSH/plugins/# Custom plugins may be added to $ZSH_CUSTOM/plugins/# Example format: plugins=(rails git textmate ruby lighthouse)# Add wisely, as too many plugins slow down shell startup.plugins=( git zsh-autosuggestions zsh-syntax-highlighting)source $ZSH/oh-my-zsh.sh Q&amp;Abrew doctor 12345678910111213Warning: Unbrewed header files were found in /usr/local/include.If you didn&#x27;t put them there on purpose they could cause problems whenbuilding Homebrew formulae, and may need to be deleted.解决：删除这些文件，如果文件很多的话，可以吧文件路径保存在一个文件里面，然后执行命令删除命令如下cat headers.txt | xargs rm卸载：命令行执行ruby -e &quot;$(curl -fsSL [https://raw.githubusercontent.com/Homebrew/install/master/uninstall](https://raw.githubusercontent.com/Homebrew/install/master/uninstall))&quot; 删除被锁的软件123456789sudo /usr/bin/chflags -R noschg /Applications/ESET\\ Management\\ Agent.appsudo rm -rf /Applications/ESET\\ Management\\ Agent.appsudo /usr/bin/chflags -R noschg /Applications/ESET\\ Endpoint\\ Security.appsudo rm -rf /Applications/ESET\\ Endpoint\\ Security.appsudo /usr/bin/chflags -R noschg /Applications/ESET\\ Management\\ Agent.app\\ 1sudo /usr/bin/chflags -R noschg /Applications/ESET\\ Management\\ Agent.app\\ 2","tags":["工具","Mac"]},{"title":"See the world","path":"/2022/09/19/科学环境指南/","content":"机场登录 - 飞毯加速 FreeCloud 国外服务账号奈飞小铺 - 智能账号合租平台 软件 相关教程google 搜索 软件名+使用 iOS 苹果商店 https://apps.apple.com/us/app/shadowrocket/id932747118 https://apps.apple.com/app/stash/id1596063349 https://apps.apple.com/us/app/quantumult-x/id1443988620 Mac https://github.com/yichengchen/clashX/releases https://github.com/yanue/V2rayU/releases https://github.com/shadowsocks/ShadowsocksX-NG/releases Windows https://github.com/2dust/v2rayN/releases https://github.com/Fndroid/clash_for_windows_pkg&#x2F;releases Android https://github.com/Kr328/ClashForAndroid/releases https://github.com/shadowsocks/shadowsocks-android/releases/tag/v5.2.6 google play 商店 https://play.google.com/store/search?q=v2ray&amp;c=apps https://play.google.com/store/search?q=shadowsocks&amp;c=apps https://play.google.com/store/apps/details?id=com.github.kr328.clash 自建服务关于XrayR喵老大","tags":["工具","思考"]},{"title":"Flutter 使用ffi来提高通信效率","path":"/2022/08/11/Flutter 使用ffi来提高通信效率/","content":"背景开眼项目是一个纯Flutter开发的项目，并且使用Flutter开发了MV模版视频以及通用视频的编辑的功能。为了实现这些功能是怎样与音视频SDK去做通信的呢？ 开眼项目前期接入编辑SDK是通过 Channel 调用编辑SDK提供的 Android与iOS 层接口的实现来与底层音视频SDK进行通信的，如图所示： Flutter 通过使用 grpc 分别传递到信息给到原生层 Android与iOS，然后再使用编辑SDK内部提供的两端中间层去与底层C层去通信的。但是使用这种 Channel 方案会存在两个问题，一个就是在获取缩略图的场景下，Android端的图片需要先在jvm层拷贝一次，然后在传输到Flutter层这样jvm就会申请多余的内存，而且这个过程中也会消耗额外的像素拷贝时间。另一点就是在项目中业务这边需要写大量的Channel代码，基本上编辑SDK的每个接口都需要对应的写个Channel接口。 优化那么如何解决以上提到的这种问题呢？ 了解到 Flutter 在1.10版本以后，官方支持了 dart：ffi 功能，使得 dart 可以调用 c&#x2F;c++ 代码成为了可能。与音视频中台沟通后计划通过 ffi 的方式提供面向 Flutter 的接口，这样业务只需要调用编辑SDK提供出来的 Flutter 层接口就行不用在使用 Channel 的方式来通信了。流程如下图： 这种新的方式使得业务接入成本与原生接入基本一致。同时编辑SDK内部通过 ffi 与 c&#x2F;c++ 层通信，直接将数据通过 ffi 返回到flutter层解决了冗余内存和效率的问题。 问题在实现ffi方案的时候总结了一些问题。 异步通信问题在Flutter版本以前是无法进行异步通信的，原因是Flutter使用Dart语言是单线程的，Dart里面有个isolate的模块类似线程是一个典型的C&#x2F;S架构只允许端口间通信。在Flutter 1.12版本上看相关的函数被strip，无法直接调用以下接口： 123456DART_EXPORT Dart_Port Dart_NewNativePort(const char* name,Dart_NativeMessageHandler handler,bool handle_concurrently);DART_EXPORT bool Dart_PostCObject(Dart_Port port_id, Dart_CObject* message);DART_EXPORT bool Dart_CloseNativePort(Dart_Port native_port_id); Flutter 1.17版本以上Dart层暴露了对应的函数指针,这样就可以不用修改Flutter的引擎就可以直接使用了，下面是整个异步的流程： 缓存jni环境使用ffi后dart层与c层就直接通信了也不需要Android的jni环境。但是c层中某些时候也需要调用平台侧的一些代码，比如Android硬编硬解接口的调用。这时候c层再去调用java方法的时候就遇到了没有jni环境的问题，如下图： 解决办法就是初始化的时候要把jni环境缓存下来以便下次能够直接调用。但是由于调用线程不一样，直接缓存的jni环境在实时使用的时候不一定能用。有两种方式可以解决，一种是在初始化的时候把需要调用的硬编硬解class和method都先find后缓存下来，需要调用的时候直接用；第二种是缓存classloader，由于java加载类的核心是classloader，那么其实把classloader缓存下来也就能findClass，jniEnv在调用的时候在通过JavaVM创建一个新的就行。 缓存classloader的方式代码如下： 123456789101112131415161718192021222324252627void SetJavaVm(JavaVM* vm) &#123; javaVM = vm;#if defined(BUILD_WITH_FLUTTER) &amp;&amp; KSE_OS_ANDROID JNIEnv* env = GetEnv(); //it can be anyone of class auto randomClass = env-&gt;FindClass(&quot;com/vvusu/video/editorsdk2/EditorSdk2Utils&quot;); jclass classClass = env-&gt;GetObjectClass(randomClass); auto classLoaderClass = env-&gt;FindClass(&quot;java/lang/ClassLoader&quot;); auto getClassLoaderMethod = env-&gt;GetMethodID(classClass, &quot;getClassLoader&quot;, &quot;()Ljava/lang/ClassLoader;&quot;); gClassLoader = env-&gt;NewGlobalRef(env-&gt;CallObjectMethod(randomClass, getClassLoaderMethod)); gFindClassMethod = env-&gt;GetMethodID(classLoaderClass, &quot;findClass&quot;, &quot;(Ljava/lang/String;)Ljava/lang/Class;&quot;);#endif if (vm != nullptr) &#123; assert(!pthread_once(&amp;g_jni_ptr_once, &amp;CreateJNIPtrKey)); &#125; else &#123; pthread_key_delete(g_jni_ptr_once); &#125;&#125;#if defined(BUILD_WITH_FLUTTER) &amp;&amp; KSE_OS_ANDROIDjclass FindClass(const char* name) &#123; return static_cast&lt;jclass&gt;(GetEnv()-&gt;CallObjectMethod(gClassLoader, gFindClassMethod, GetEnv()-&gt;NewStringUTF(name)));&#125;#endif 字节对齐由于cpu的访问效率，字节对齐是音视频开发中特别常见的一个问题。不过一般遇到的字节对齐问题都是Android的，因为iOS大部分细节CVPixelBuffer都帮忙处理了。但是ffi由于不和原生平台api打交道，所以需要额外处理一下。 1234567891011121314151617181920212223242526CVPixelBufferRef pixelBuff = pixelData-&gt;Get();if (!pixelBuff) &#123; XLOGE(&quot;Dart_ThumbnailGenerator_getThumbnailASync pixelBuff is null&quot;); return nullptr;&#125;UniqueAVFramePtr frame = UniqueAVFramePtrCreate(AV_PIX_FMT_RGBA, width, height);CVReturn err = CVPixelBufferLockBaseAddress(pixelBuff, kCVPixelBufferLock_ReadOnly);if (err != kCVReturnSuccess) &#123; XLOGE(&quot;Dart_ThumbnailGenerator_getThumbnailASync error locking pixel buffer&quot;); return nullptr;&#125;size_t bytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuff);// 处理16对齐情况下if (bytesPerRow &gt; width*4) &#123; int targetPerRow = width*4; uint8_t *dstPixel = (uint8_t*)malloc(targetPerRow*height); uint8_t* srcPixel = (uint8_t*)CVPixelBufferGetBaseAddress(pixelBuff); for (int line = 0; line &lt; height; line++ ) &#123; memcpy(dstPixel+line*targetPerRow, srcPixel+line*bytesPerRow, targetPerRow); &#125; imgData = dstPixel;&#125; else &#123; imgData = (uint8_t*)CVPixelBufferGetBaseAddress(pixelBuff);&#125;CVPixelBufferUnlockBaseAddress(pixelBuff, kCVPixelBufferLock_ReadOnly);","tags":["工具","开发"]},{"title":"C++ 基础总结","path":"/2022/07/18/C++ 基础总结/","content":"C++发展历史 1998 年定义第一个 C++ 标准为 C++98 2003 年定义第二个 C++ 标准为 C++03 2011 年定义第三个 C++ 标准为 C++11 2014 年定义第四个 C++ 标准为 C++14 2017 年定义第五个 C++ 标准为 C++17 2020 年定义第六个 C++ 标准为 C++20 iOS项目中选择C++版本 语法须知C++的源文件扩展名是:cpp cc， 头文件：hpp hC++程序的入口是main函数C++完全兼容C语言的语法，其实就是C的扩充 #1. cin、coutC++中常使用cin、cout进行控制台的输入、输出 cin用的右移运算符&gt;&gt;，cout用的是左移运算符&lt;&lt; endl是换行的意思 #2. 函数重载(Overload) 函数名相同 参数个数不同, 参数类型不同, 参数顺序不同 如下面这样 下面这样写法可以吗？ 本质上：采用了name mangling的技术，其实就是就是对函数名进行改编，修饰生成不同的函数名字，不同编译器生成规则不一样 #3.默认参数 C++允许函数设置默认参数，在调用时可以根据情况省略实参 默认参数只能按照右到左的顺序 如果函数同时有声明、实现，默认参数只能放在函数声明中 默认参数的值可以是常量、全局变量或者函数名 #4. extern “C” 被extern “C”修饰的代码会按照C语言的方式去编译 如果函数同时有声明和实现，要让函数声明被extern “C”修饰，函数实现可以不修饰 下面会报错吗？ 由于C、C++编译规则的不同，在C、C++混合开发时，C库需要添加__cplusplus来适配C++环境 防止头文件重复包含， 也可以使用#pragma once 达到通用的效果（针对整个文件，比较新的IDE支持） 12345#ifndef math_h#define math_h#endif /* math_h */ #5. 内联函数(inline function) 使用inline修饰函数的声明或者实现，可以使其变成内联函数(建议声明和实现都增加inline修饰) 作用：编译器会将函数调用直接展开为函数体代码，可以减少函数调用的开销，但是会增大代码体积 注意：不要内联超过10行代码的函数，有些函数内联，但是编译器不会操作（递归函数） #6. const 关键字 const是常量的意思，被其修饰的变量不可修改 如果修饰的是类、结构体(的指针)，其成员也不可以更改 const修饰的是其右边的内容 #7. 引用(Reference) C语言中，使用指针(Pointer)可以间接获取、修改某个变量的值 C++中，使用引用(Reference)可以起到跟指针类似的功能 引用相比指针更安全，且函数返回值可以被赋值 引用的本质就是指针，只是编译器削弱了它的功能，所以引用就是弱化了的指针 一个引用占用一个指针的大小 注意事项 引用相当于是变量的别名(基本数据类型、枚举、结构体、类、指针、数组等，都可以有引用) 对引用做计算，就是对引用所指向的变量做计算 在定义的时候就必须初始化，一旦指向了某个变量，就不可以再改变，”从一而终” 可以利用引用初始化另一个引用，相当于某个变量的多个别名 不存在【引用的引用、指向引用的指针、引用数组】 常引用(Const Reference) 引用可以被const修饰，这样就无法通过引用修改数据了，可以称为常引用 const必须写在&amp;符号的左边，才能算是常引用 特点： 可以指向临时数据(常量、表达式、函数返回值等) 可以指向不同类型的数据 作为函数参数时(此规则也适用于const指针) 可以接受const和非const实参(非const引用，只能接受非const实参) 可以跟非const引用构成重载 当常引用指向了不同类型的数据时，会产生临时变量，即引用指向的并不是初始化时的那个变量 其他资源C++ 教程| 菜鸟教程：https://www.runoob.com/cplusplus/cpp-tutorial.htmlC++11学习 https://blog.csdn.net/Innost/article/details/52583732C++面试题30道 https://blog.csdn.net/fakine/article/details/51321544 推荐几本书标准库STL学习 《STL源码剖析》C++和C语法基础 《C++ Primer 中文版（第 5 版)C++进阶 《Effective C++》, 《More Effective C++》C++11新标准 《深入理解C++11》","tags":["工具","开发"],"categories":["技术分享"]},{"title":"家庭保险选择指南","path":"/2022/07/18/家庭保险选择指南/","content":"前言在当今社会,合理的保险配置对于每个家庭来说都至关重要。本文将从实用性和性价比的角度,为大家详细介绍各类保险的特点、购买要点以及具体配置建议,帮助读者建立起科学的保险保障体系。 保险配置的基本原则在开始具体介绍各类保险之前,我们需要明确以下几个基本原则: 保障优先,理财次之 基础保障先行,附加保障后补充 性价比优先,避免过度保障 长期保障为主,短期保障为辅 合理分配预算,避免保费支出过重 基于以上原则,一个家庭的保险配置优先级建议如下: 社会医疗保险(医保) 商业医疗保险(百万医疗险) 重大疾病保险 定期寿险 意外险和其他补充保险 医疗保障体系搭建1. 社会医疗保险医保是我国医疗保障体系的基石,具有以下特点: 强制性和普惠性 低保费高保障 终身保障无条件续保 覆盖基础医疗需求 建议: 无论是职工医保还是居民医保都必须及时缴纳 异地就医备案要提前办理 了解本地医保报销政策和范围 保存好就医相关单据 2. 商业医疗保险(百万医疗险)作为医保的有效补充,百万医疗险具有以下特征: 核心优势: 高额保障(通常100万以上) 费率相对低廉 报销比例高(通常80%-100%) 保障范围广 购买要点: 保额选择 一般100万保额即可满足大多数需求 考虑自身经济状况和医疗需求 避免过度投保 重要保障项目 住院医疗保障 特定门诊保障 质子重离子治疗 院外特药保障 恶性肿瘤保障 产品选择建议 选择大型保险公司的主打产品 关注保证续保期限(建议20年或以上) 注意免赔额设置(建议1万以下) 核实报销范围和除外责任 投保注意事项 如实告知健康状况 仔细阅读条款和责任免除 及时续保避免断保 保存投保资料和保单 重大疾病保险配置重疾险是对医疗险的重要补充,主要用于弥补患病期间的收入损失。 1. 产品特点 确诊即赔付 赔付金额固定 保障病种明确 等待期通常90天 2. 配置建议保额确定: 普通家庭建议30-50万 有房贷家庭可适当提高 考虑3-5年的家庭收支需求 保障期限: 年轻人建议终身保障 中年人可选择保至70岁 结合个人预算和保障需求 3. 选择要点 选择保障病种全面的产品 重点关注重疾的定义 注意产品的轻症保障 考虑多次赔付功能 人寿保险配置1. 定期寿险特点 纯保障无储蓄 保费低廉 保额充足 期限灵活 2. 配置建议适用人群: 家庭经济支柱 有房贷压力者 有抚养义务者 保额确定: 家庭年收入的5-10倍 未还房贷金额 子女教育费用 保险期限: 与房贷期限匹配 至子女独立时期 一般20-30年 补充保险配置1. 团体补充医疗保险特点与作用: 报销门诊费用 降低医疗险免赔额 提供就医便利 无需个人承担保费 2. 惠民保险适用情况: 医疗险投保受限 预算有限 需要基础医疗保障 主要特点: 免赔额较高 仅限医保目录内 续保不确定 保费相对低廉 3. 税优健康保险优势特点: 保费可税前抵扣 保证续保至退休 接受既往病史 无免赔额设置 保险配置的误区与建议常见误区 过分追求保额 忽视保障实质 盲目追求品牌 投机取巧不如实告知 实用建议 根据家庭状况合理规划 保费支出控制在收入15%以内 优先配置基础保障 定期检视保险配置 结语科学的保险配置需要我们理性分析,结合自身情况做出合适的选择。好的保险配置既能提供充分保障,又不会给家庭带来过重负担。希望本文能够帮助读者建立起完善的保险保障体系,为家庭筑起一道安全防线。","tags":["保险","理财"],"categories":["生活分享"]},{"title":"音视频-添加水印如何做到三端统一的","path":"/2022/07/18/音视频-添加水印如何做到三端统一/","content":"跨平台视频水印一致性解决方案一、问题背景与挑战在多媒体处理领域，视频水印功能是众多项目的核心需求。传统实现方案存在以下痛点： 多端差异：前端、客户端和后端各自实现水印算法，导致输出结果不一致 分辨率适配：不同设备屏幕分辨率（576p&#x2F;720p&#x2F;1080p）导致水印比例失调 维护成本：设计变更需要多端同步调整参数，沟通协调成本高 动态水印支持：文字水印和动态视频水印的混合处理复杂度高 二、技术方案设计2.1 坐标系标准化采用归一化坐标系系统，将视频画面抽象为100x100的二维空间： 坐标系原点：左上角(0,0) 坐标系终点：右下角(100,100) 水印定位：基于中心点坐标计算位置 2.2 动态缩放算法以720P为基准分辨率，建立动态缩放模型： 1scale = baseScale + (min(outputWidth, outputHeight) / 720 - 1) 参数说明： baseScale: 设计稿原始缩放系数（通常为1） outputWidth: 输出视频宽度 outputHeight: 输出视频高度 分辨率适配示例： 输出分辨率 计算过程 最终缩放系数 320x576 1 + (320&#x2F;720-1) 0.44 720x1280 1 + (720&#x2F;720-1) 1.0 1080x1920 1 + (1080&#x2F;720-1) 1.5 2.3 多端统一实现 前端规范： 设计稿以720px宽度为基准 使用SVG矢量图形保证缩放质量 文字转位图时保留20%安全边距 服务端处理： 1234def calculate_watermark_scale(output_width, output_height): base_resolution = 720 short_edge = min(output_width, output_height) return 1 + (short_edge / base_resolution - 1) 客户端渲染： 1234567func adaptWatermark(size: CGSize, videoResolution: CGSize) -&gt; CGSize &#123; let base: CGFloat = 720 let shortEdge = min(videoResolution.width, videoResolution.height) let scale = 1 + (shortEdge / base - 1) return CGSize(width: size.width * scale, height: size.height * scale)&#125; 三、关键技术实现3.1 混合水印处理 图像水印： 预处理：去除Alpha通道阴影偏移 尺寸修正：动态视频水印宽度按50%折算 文字水印： 字体抗锯齿处理 动态字号计算：fontSize * scale 边距补偿：padding = designPadding * scale 3.2 性能优化 预计算缩放矩阵 多分辨率缓存机制 GPU加速渲染管线 四、实施效果与最佳实践效果对比： 实践建议： 设计规范： 提供720px基准设计稿 标注安全边距区域 输出矢量格式素材 开发规范： 1234567// 水印配置示例const watermarkConfig = &#123; baseResolution: 720, position: &#123; x: 10, y: 90 &#125;, // 坐标系百分比 safePadding: 0.2, // 边距系数 dynamicScaling: true&#125; 质量控制： 建立多分辨率测试用例集 实现像素级比对工具 持续集成自动化校验 本方案通过标准化坐标系、动态缩放算法和多端统一实现，解决了跨平台水印一致性问题。经实际项目验证，水印位置误差控制在±0.5%以内，素材修改成本降低80%，为多媒体处理提供了可靠的技术基础。","tags":["工具","开发"]},{"title":"Jenkins fir平台配置","path":"/2022/07/12/Jenkins fir平台配置/","content":"Android1234567891011121314151617181920212223#!/bin/bash# 编译rm -rf Gemfile.lockcd fastlanebundle installVAR1=&quot;$&#123;BUILD_TYPE&#125;&quot;VAR2=&quot;debug&quot;if [ &quot;$VAR1&quot; = &quot;$VAR2&quot; ]; then method=&quot;build&quot;else method=&quot;release&quot;fibundle exec fastlane android $method# 上传到APP管理平台result=$(curl -k -F &quot;file=@$WORKSPACE/dist/android/kidea_android_$&#123;BUILD_TYPE&#125;.apk&quot; &lt;https://nas.vvusu.com:1020/app/upload&gt;)code_url=$(echo $result | sed &#x27;s/.*\\\\(http.*\\\\)&quot;,.*/\\\\1/g&#x27;)echo &quot;code_url=&quot;$code_url &gt; $WORKSPACE/code.txt iOS123456789101112131415161718192021222324# 编译security set-key-partition-list -S apple-tool:,apple: -s -k &quot;woaini&quot; ~/Library/Keychains/login.keychain-dbrm -rf Gemfile.lockcd fastlanebundle installVAR1=&quot;$&#123;BUILD_TYPE&#125;&quot;VAR2=&quot;beta&quot;VAR3=&quot;debug&quot;if [ &quot;$VAR1&quot; = &quot;$VAR2&quot; ]; then method=&quot;inhouse&quot;elif [ &quot;$VAR1&quot; = &quot;$VAR3&quot; ]; then\tmethod=&quot;adhoc&quot;else method=&quot;release&quot;fibundle exec fastlane ios $method# 上传到APP管理平台result=$(curl -k -F &quot;file=@$WORKSPACE/dist/ios/kidea_ios_$&#123;method&#125;.ipa&quot; &lt;https://nas.vvusu.com:1020/app/upload&gt;)code_url=$(echo $result | sed &#x27;s/.*\\\\(http.*\\\\)&quot;,.*/\\\\1/g&#x27;)echo &quot;code_url=&quot;$code_url &gt; $WORKSPACE/code.txt keep 打包平台配置iOS 配置12345678910# 使用私有dartexport PUB_HOSTED_URL=https://dart.corp.vvusu.comrm -rf Gemfile.lockrm -rf ios/Podfile.lockbundle installcallback --url $&#123;url&#125; --taskid $&#123;taskid&#125; --jenkinsurl $&#123;BUILD_URL&#125; --status compilebundle exec fastlane ios betacommit_id=`git rev-parse --short HEAD`upipa dist/ios/$&#123;ipa_name&#125;.ipa dist/ios/$&#123;ipa_name&#125;.app.dSYM.zip $&#123;taskid&#125; $&#123;BUILD_URL&#125; Android 配置123456789101112131415161718keep打包指令：echo &quot;PUB_HOSTED_URL=https://dart.corp.vvusu.com;&quot; &gt;&gt; ~/.bash_profile;echo &quot;FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn;&quot; &gt;&gt; ~/.bash_profile;echo &quot;export FLUTTER_ROOT=/home/jenkins/fvm/versions/v1.9.1+hotfix.6;&quot; &gt;&gt; ~/.bash_profile;source ~/.bash_profile;echo &quot;PATH=$PATH:$FLUTTER_ROOT/bin:$FLUTTER_ROOT/bin/cache/dart-sdk/bin:&#x27;$HOME/.pub-cache/bin&#x27;;&quot; &gt;&gt; ~/.bash_profile;source ~/.bash_profile;export http_proxy=http://oversea-squid4.sgp.txyun:11080;export https_proxy=http://oversea-squid4.sgp.txyun:11080;alias curl=&#x27;curl -x oversea-squid4.sgp.txyun:11080&#x27;;alias wget=&#x27;wget -e &quot;http_proxy=oversea-squid4.sgp.txyun:11080&quot;&#x27;;pub global activate fvm;fvm use v1.9.1+hotfix.6;flutter doctor --verbose;echo $&#123;PATH&#125;;flutter pub cache repair;fvm flutter pub get;","tags":["工具","开发"]},{"title":"PVE DDNS外网访问家中服务","path":"/2022/07/12/PVE DDNS外网访问家中服务/","content":"本篇记录一下在 PVE 虚拟机下执行自己编写的脚本来实现DDNS外网访问功能 首先需要自行购买域名，有许多的域名提供商，个人比较推荐国外的域名提供商,下面列了几个比较常见的域名提供商。 Godaddy Google Domains NameCheap NameSilo 因为我目前使用的是Godaddy 域名提供商，以下教程是对应的解决方法和教程， 当我们购买了域名，首先要做的是需要创建一个 API Key， 通过这个网址进行注册，https://developer.godaddy.com/keys 点击创建API Key , 输入一个名字，以及Environment 需要选择 Production，点击Next 生成成功，记录一下你自己的 Key 以及 Secret 信息 然后在我的产品里面创建一条 DNS A记录 域名操作的部分已经完成，下面就开始在PVE虚拟机下进行操作，或者其他Linux系统都行 下面是一个需要自动执行的一个检测和更新DNS的一个脚本，需要替换的值，就是上面创建的Key ，Secret，A记录名字以及根域名。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#!/bin/bash# This script is used to check and update your GoDaddy DNS server to the IP address of your current internet connection.# Special thanks to mfox for his ps script# https://github.com/markafox/GoDaddy_Powershell_DDNS## First go to GoDaddy developer site to create a developer account and get your key and secret## https://developer.godaddy.com/getstarted# Be aware that there are 2 types of key and secret - one for the test server and one for the production server# Get a key and secret for the production server##Update the first 4 variables with your informationdomain=&quot;xxx.com&quot; # 你的根域名name=&quot;xxxx&quot; # 域名 A 记录key=&quot;xxxxxxxxxxxxxxxxxxxxxxxxxx&quot; # API-Keysecret=&quot;xxxxxxxxxxxxxxxxxxxxxxx&quot; # API-Secret# Mainheaders=&quot;Authorization: sso-key $key:$secret&quot;result=$(curl -s -X GET -H &quot;$headers&quot; \\\t&quot;https://api.godaddy.com/v1/domains/$domain/records/A/$name&quot;)echo &quot;result:&quot; $result# 当前DSN IPdnsIp=$(echo $result | grep -oE &quot;\\b([0-9]&#123;1,3&#125;\\.)&#123;3&#125;[0-9]&#123;1,3&#125;\\b&quot;)echo &quot;dnsIp:&quot; $dnsIp# 国内IP查询服务# https://api.ipify.orgcurrentIp=$(curl -s https://api.ipify.org)echo &quot;https://api.ipify.org currentIp:&quot; $currentIp# https://ipinfo.io/jsonif [ ! -n &quot;$currentIp&quot; ]; then\tret=$(curl -s GET &quot;https://ipinfo.io/json&quot;)\tret=$(echo $ret | grep -oE &quot;\\&quot;\\b([0-9]&#123;1,3&#125;\\.)&#123;3&#125;[0-9]&#123;1,3&#125;\\b\\&quot;&quot;)\tcurrentIp=$(echo $ret | grep -oE &quot;\\b([0-9]&#123;1,3&#125;\\.)&#123;3&#125;[0-9]&#123;1,3&#125;\\b&quot;)\techo &quot;https://ipinfo.io/json currentIp:&quot; $currentIp\t# http://ip.42.pl/raw\tif [ ! -n &quot;$currentIp&quot; ]; then currentIp=$(curl -s GET &quot;http://ip.42.pl/raw&quot;) echo &quot;http://ip.42.pl/raw currentIp:&quot; $currentIp\tfifi# 如果不一致进行更新if [ &quot;$dnsIp&quot; != &quot;$currentIp&quot; ]; then\trequest=&#x27;[&#123;&quot;data&quot;:&quot;&#x27;$currentIp&#x27;&quot;,&quot;service&quot;:&quot;&#x27;$domain&#x27;&quot;,&quot;ttl&quot;:600&#125;]&#x27;\techo $request\tnresult=$(curl -i -s -X PUT \\ -H &quot;$headers&quot; \\ -H &quot;Content-Type: application/json&quot; \\ -d $request &quot;https://api.godaddy.com/v1/domains/$domain/records/A/$name&quot;)\techo $nresultfi 复制这段脚本并修改相应的值保存到 PVE 虚拟机下的 &#x2F;opt&#x2F;shell&#x2F; 目录下(没有就创建文件夹) 脚本重命名为 godaddy-dns.sh 完成后需要修改 PVE下的自动执行相关逻辑设置，如下命令是编写系统自动周期性执行的相关逻辑 1234# 查看当前用户定时任务crontab -l # 编辑任务crontab -e 编辑任务填写如下代码，意思是每5分钟就执行一次上面的脚本进行检测，使用方法可参见：Linux crontab 命令 12# 每5分钟检查DNS解析是否正确*/5 * * * * /opt/shell/godaddy-dns.sh 12# 如果没有执行权限，添加一下权限chmod +x godaddy-dns.sh 到此DDNS相关设置已经完成，后面需要你做的就是把自己服务相关的端口进行端口转发设置， 通过自己购买的域名添加上设置的端口就可以访问家中的服务了，这个地方有个前提，需要清楚家里 的网络连接设置情况，以及你目标服务的网段，如果是多个网段需要进行多次的端口转发。","tags":["Proxmox","软路由"]},{"title":"PVE 安装 Windows11 系统","path":"/2022/06/29/PVE 安装 Windows11 系统/","content":"物料准备Windows系统资源站推荐: （根据自己喜好自行下载） 登录 Windows11系统 iSO文件： Windows 11 (business editions) (updated June 2022) (x64) - DVD (Chinese-Simplified) 下载地址： 1234567891011# Windows 11 (business editions), version 22H2 (updated Nov 2022) (x64) - DVD (Chinese-Simplified)ed2k://|file|zh-cn_windows_11_business_editions_version_22h2_updated_nov_2022_x64_dvd_3623b3e1.iso|5567041536|B83E64D03E93B418840E5B270E164005|/magnet:?xt=urn:btih:3382423b817d5f964847633e0bc9c28b9b8335b6&amp;dn=zh-cn_windows_11_business_editions_version_22h2_updated_nov_2022_x64_dvd_3623b3e1.iso&amp;xl=5567041536# Windows 11 (consumer editions), version 22H2 (updated Nov 2022) (x64) - DVD (Chinese-Simplified)ed2k://|file|zh-cn_windows_11_consumer_editions_version_22h2_updated_nov_2022_x64_dvd_2c7e96c3.iso|5673539584|EB8FF2B481BB6AFE71B2784C6485733B|/magnet:?xt=urn:btih:30072e91bc916e5a43c58b012fdaadd1d70d1c71&amp;dn=zh-cn_windows_11_consumer_editions_version_22h2_updated_nov_2022_x64_dvd_2c7e96c3.iso&amp;xl=5673539584# Windows 11, version 22H2 (ARM64) - DVD (Chinese-Simplified)ed2k://|file|SW_DVD9_Win_Pro_11_22H2_64ARM_ChnSimp_Pro_Ent_EDU_N_MLF_X23-12755.ISO|5719896064|D6DE1514C942ED84DB037F56E4457904|/magnet:?xt=urn:btih:e8c15208116083660709eac9aee124e025c01447&amp;dn=SW_DVD9_Win_Pro_11_22H2_64ARM_ChnSimp_Pro_Ent_EDU_N_MLF_X23-12755.ISO&amp;xl=5719896064 https://www.freedidi.com/15159.html 精简版本系统下载： https://archive.org/details/tiny11-2409 虚拟机Windows驱动 iSO文件： https://github.com/virtio-win/virtio-win-pkg-scripts 下载图中的iSO文件 PVE 相关设置创建虚拟机创建，选择对应的系统类型 系统设置 虚拟机启动安装 重启多次安装成功 驱动安装 开启网络发现 开启远程桌面必要条件需要账户必须设置登录密码 Q&amp;AU盘安装无法运行 windows11 问题123456789在这个界面按 Shift+F10，打开命令行界面，输入 regedit 打开注册表，然后定位到：HKEY_LOCAL_MACHINE\\SYSTEM\\Setup创建一个名为“LabConfig”的项，接着在“LabConfig”下创建两个 DWORD 值(32位)：BypassTPMCheck / 00000001BypassSecureBootCheck / 00000001完成上述1个项和3个键值的建立和设定后，关闭注册表编辑器，关闭CMD窗口，回到报错窗口，返回上一步（左上角按钮），重新执行安装，此时你会发现可以顺利装下去了。 Windows KMS 激活问题123456789101112一、首先需要安装好一个OpenWrt系统，并且开启KMS服务器；二、Windows（支持win7/8/10/11）的激活方法1、以管理员方式运行Windows Powershell，输入slmgr /upk回车，先卸载原来自带密钥。2、输入slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX 回车替换密钥，该密钥可以激活Win10/11。3、输入slmgr /skms 10.0.0.253 回车，其中：10.0.1.253 为 OpenWrt 的IP地址，请自行替换。4、输入slmgr /ato回车，即可使用OpenWrt的KMS功能激活Windows。二、Office（支持2010到2021）的激活方法1、以管理员方式运行Windows Powershell，用cd命令进入安装到Office的目录，比如：cd “C:\\Program Files\\Microsoft Office\\Office16”回车；2、输入cscript ospp.vbs /sethst:10.0.1.253 回车；3、输入cscript ospp.vbs /act 回车，即可使用OpenWrt的KMS功能激活Office。 如何禁止Windows休眠123456// 如何使休眠不可用1. 按下键盘上的**Windows** 按钮，打开开始菜单或开始屏幕。2. 搜索“cmd”。 ...3. 当用户帐户控制提示时，选择“继续”。4. 在命令提示符处，键入 powercfg.exe /hibernate off ，然后按Enter。5. 键入“exit”，然后按Enter 关闭“命令提示符”窗口。 如何挂载 WebDav 磁盘如果WebDAV不是https的，win11 默认是添加不上的，需要修改注册表使得 Win11 同时支持http和https. 123456789Win + r 输入 regedit 打开注册表:HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\WebClient\\Parameters把BasicAuthLevel 值改成 2即同时支持http和https，默认只支持https然后重启服务： （WIN + R）net stop webclientnet start webclient","tags":["Proxmox","软路由"]},{"title":"PVE 安装 OpenWrt 系统","path":"/2022/06/24/PVE 安装 OpenWrt 系统/","content":"下载OpenWrt系统 Immortalwrt: https://downloads.immortalwrt.org/ https://firmware-selector.immortalwrt.org/ lean： https://github.com/coolsnowwolf/lede iStoreOS： https://fw.koolcenter.com/iStoreOS/ 在线定制编译 ： https://supes.top/ 下载完后解压，并上传到PVE系统中 OpenWrt系统PVE VM创建一下是我这边创建的配置信息，硬盘先不需要添加。 如果需要扩容参考链接： https://dickies.myds.me:56789/st/routeos/1024/ 1234567891011121314151617181920212223242526272829303132apt-get install parted// 添加5G的空余空间dd if=/dev/zero bs=1G count=5 &gt;&gt; /var/lib/vz/template/iso/immortalwrt-23.05.4.img// 执行分区命令：parted /var/lib/vz/template/iso/immortalwrt-23.05.4.img// 使用print命令查看当前镜像包的分区情况root@pve:~# parted /var/lib/vz/template/iso/immortalwrt-23.05.4.imgGNU Parted 3.5Using /var/lib/vz/template/iso/immortalwrt-23.05.4.imgWelcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.(parted) print Model: (file)Disk /var/lib/vz/template/iso/immortalwrt-23.05.4.img: 2496MBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags: Number Start End Size File system Name Flags128 17.4kB 262kB 245kB bios_grub 1 262kB 33.8MB 33.6MB fat16 legacy_boot 2 33.8MB 2496MB 2462MB(parted) // 可以看到分区2是镜像包默认的分区空间，下面我们使用命令将刚才增加的5GB空数据整合进这个分区resizepart 2 100%// 在升级的时候，记得也要对升级包进行一次扩容，再打包成gz压缩包，再做升级。打包命令如下gzip immortalwrt-23.05.4.img 通过固件img 倒入硬盘 12345678# 101 vm号 # /var/lib/vz/template/iso/openwrt_esir.img pve中上传的img文件# qm importdisk 109 /var/lib/vz/template/iso/immortalwrt.img local-lvmqm importdisk 101 /var/lib/vz/template/iso/openwrt_esir.img local-lvmqm importdisk 106 /var/lib/vz/template/iso/immortalwrt-23.05.4.img local-lvm 导入成功后需要设置一下硬盘的格式，选择 SCSI 格式。 扩充一下磁盘空间，必须在第一次启动之前操作，这里扩充了2GB后续用于安装插件。 在Options选项中选择启动顺序：把stat0移动到第一位并打勾。 所有设置完后，启动虚拟机。 设置虚拟的IP地址： 123nano /etc/config/network// 没有 nano 命令使用 vi 命令操作vi /etc/config/network 在浏览器中访问，你设置的IP地址就可以了，登陆账号：root 密码为空。 软件包安装对于纯净的OpenWrt 系统，需要安装一些必要的软件包。前提你配置好了网络，有网环境。 常用软件包地址：地址 软件名 功能 下载地址 Github地址 lucl-theme-argon 主题 https://github.com/jerrykuku/luci-theme-argon luci-app-vlmcsd KMS 激活工具 https://github.com/cokebar/openwrt-vlmcsd luci-i18n-ttyd-zh-cn 命令行工具 https://github.com/openwrt/luci/tree/openwrt-22.03/applications/luci-app-ttyd mosdns DNS工具 &#x2F;&#x2F; 安装opkg updateopkg install curlsh -c “$(curl -ksS https://raw.githubusercontent.com/sbwml/luci-app-mosdns/v5/install.sh)” https://github.com/sbwml/luci-app-mosdns luci-app-zerotier 网络工具 https://github.com/rufengsuixing/luci-app-zerotier luci-app-openclash 科学上网工具 https://github.com/vernesong/OpenClash luci-i18n-passwall-zh-cn 科学上网工具 https://github.com/xiaorouji/openwrt-passwall luci-i18n-homeproxy-zh-cn 科学上网工具 https://github.com/douglarek/luci-app-homeproxy luci-app-lucky Lucky DDNS工具 https://github.com/gdy666/luci-app-lucky/releases https://github.com/gdy666/luci-app-lucky?tab=readme-ov-file luci-app-wol 123456789101112131415161718192021222324252627282930opkg updateopkg install curlsh -c &quot;$(curl -ksS https://raw.githubusercontent.com/sbwml/luci-app-mosdns/v5/install.sh)&quot;opkg install luci-theme-argonopkg install luci-app-ttydopkg install luci-app-vlmcsdopkg install luci-app-wolopkg install luci-app-zerotieropkg install luci-i18n-passwall-zh-cnopkg install luci-app-openclashopkg install luci-i18n-ttyd-zh-cnopkg install luci-i18n-homeproxy-zh-cnopkg install luci-i18n-ddns-go-zh-cnopkg install luci-app-upnpchmod 755 /etc/ddns-go# 更新软件包源opkg update# 在线包https://op.dllkids.xyz/packages/# passwallhttps://github.com/xiaorouji/openwrt-passwall/releases# 仅更新LuCI相关软件包opkg list-upgradable | grep luci- | cut -f 1 -d &#x27; &#x27; | xargs opkg upgrade# 更新全部可更新软件包，包含OpenWRT内核等opkg list-upgradable | cut -f 1 -d &#x27; &#x27; | xargs opkg upgrade 上网配置 IPV6配置","tags":["Proxmox","软路由"]},{"title":"PVE 安装群晖7.0系统","path":"/2022/06/24/PVE 安装群晖7.0系统/","content":"下载群晖引导首先需要去下载群晖引导 引导文件发布地址： 黑群DSM7.X引导文件（2022年6月13日更新） 网盘地址： 地址 下载你想要的系统版本img 文件， 以及对应版本的群晖系统文件。img 引导文件需要上传到PVE系统中。 根据上面下载的引导文件下载对应的系统型号和版本的系统文件 下載中心 PVE 虚拟机配置首先需要创建一个群晖的虚拟机， 进入pve 下 shell 窗口，进行虚拟机配置文件修改 1nano /etc/pve/qemu-server/103.conf 以上代码中103对应群晖虚拟机ID，输入以下代码把群晖引导转换为虚拟U盘 1args: -device &#x27;qemu-xhci,addr=0x18&#x27; -drive &#x27;id=synoboot,file=/var/lib/vz/template/iso/DS918_7.21.img,if=none,format=raw&#x27; -device &#x27;usb-storage,id=synoboot,drive=synoboot,bootindex=5&#x27; 代码中 &#x2F;var&#x2F;lib&#x2F;vz&#x2F;template&#x2F;iso&#x2F;DS918_7.1.1.img 对应的是上传的路径。 一般文件上传的路径为pve系统下 &#x2F;var&#x2F;lib&#x2F;vz&#x2F;template&#x2F;iso&#x2F; 这个路径下。 直通群晖系统硬盘（软直通）进入PVE的SSH,或者直接进入PVE管理网页Shell，查看你现在的存储设备的序列号: 1ls /dev/disk/by-id 然后就能看到所有存储设备的序列号,比如我的软路由主机上有两块硬盘,一个东芝SSD,一个是西数的硬盘,需要挂载的是西数的硬盘, 我的西数硬盘序列号是ata-WDC_WDXXXX_XXXX_XXXX,记住这个序列号,然后输入以下代码(请把硬盘序列号换成你硬盘的,103换成你LEDE的虚拟机ID) 123456qm set 103 -sata0 /dev/disk/by-id/ata-ST2000LM015-2E8174_WDZZQLMSqm set 105 -sata0 /dev/disk/by-id/ata-WDC_WD80EFAX-68KNBN0_VDJ7WM6Dqm set 105 -sata1 /dev/disk/by-id/ata-WDC_WD80EFAX-68KNBN0_VDJ85LEDqm set 105 -sata2 /dev/disk/by-id/ata-WDC_WD80EFAX-68KNBN0_VDJ8658Dqm set 105 -sata3 /dev/disk/by-id/ata-WDC_WD80EFBX-68AZZN0_VG094GBG 如果返回以下信息,说明已成功挂载 1update VM 103: -sata0 /dev/disk/by-id/ata-ST2000LM015-2E8174_WDZZQLMS 然后可以进入PVE管理网页,查看是否真的挂载成功.如果看到LEDE虚拟机硬件设备里有这个,就说明成功. Q&amp;A群晖DSM系统是否可以像Linux一样安装软件？为群晖DSM系统安装ipkg包管理器实现更多软件自定义安装 123456789101112131415161718192021222324252627ssh 用户名@IP地址 #按回车输入密码 密码不显示 输入后按回车即可登陆sudo -i #再次输入密码切换root权限wget &lt;http://ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/syno-i686-bootstrap_1.2-7_i686.xsh&gt;chmod +x syno-i686-bootstrap_1.2-7_i686.xshsh syno-i686-bootstrap_1.2-7_i686.xsh#执行上述命令后即可安装ipkg包管理器#安装完成后执行以下命令进行测试ipkg update #如果没有报错就说明成功安装#如果报错ipkg : command not found则添加环境变量#PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/syno/sbin:/usr/syno/bin:/usr/local/sbin:/usr/local/bin#export PATH#再次测试 如果还不行就重启下DSM即可#首先更新软件源ipkg update#安装命令如下ipkg install 软件包名称#卸载命令如下ipkg remove 软件包名称#例如安装wakelanipkg install wakelan#返回以下内容说明安装成功ipkg install wakelanInstalling wakelan (1.1-2) to root...Downloading &lt;http://ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/wakelan_1.1-2_i686.ipk&gt;Configuring wakelanSuccessfully terminated. 引导文件下载地址https://github.com/RROrg/rr/releaseshttps://www.ainas.cc:88/sample-page 引导设置教程http://nas.zwbcc.cn:8090/archives/1700807434007 其它问题参考https://post.smzdm.com/p/aoxmzwr6/p4/#comments","tags":["Proxmox","软路由"]},{"title":"PVE 7 X换源&更换内核","path":"/2022/06/24/PVE 系统换源&更换内核/","content":"适用于Proxmox VE 7.x更换源，SSH登录到pve后台，然后执行命令。 一.处理掉企业源：1.设置 debian 中科大源 - For PVE 7.x12345678910cat &gt; /etc/apt/sources.list &lt;&lt;EOFdeb http://mirrors.ustc.edu.cn/debian/ bullseye main non-free contribdeb http://mirrors.ustc.edu.cn/debian/ bullseye-updates main non-free contribdeb http://mirrors.ustc.edu.cn/debian/ bullseye-backports main non-free contribdeb-src http://mirrors.ustc.edu.cn/debian/ bullseye main non-free contribdeb-src http://mirrors.ustc.edu.cn/debian/ bullseye-updates main non-free contribdeb-src http://mirrors.ustc.edu.cn/debian/ bullseye-backports main non-free contribdeb http://mirrors.ustc.edu.cn/debian-security/ bullseye-security main non-free contribdeb-src http://mirrors.ustc.edu.cn/debian-security/ bullseye-security main non-free contribEOF 2.删除企业源 - For PVE 7.x12rm -rf /etc/apt/sources.list.d/pve-install-repo.listecho &quot;#deb https://enterprise.proxmox.com/debian/pve Bullseye pve-enterprise&quot; &gt; /etc/apt/sources.list.d/pve-enterprise.list 3.下载秘钥 - For PVE 7.x1wget http://mirrors.ustc.edu.cn/proxmox/debian/proxmox-release-bullseye.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bullseye.gpg 4.添加国内源 - For PVE 7.x1echo &quot;deb http://mirrors.ustc.edu.cn/proxmox/debian/pve bullseye pve-no-subscription&quot; &gt;/etc/apt/sources.list.d/pve-install-repo.list 5.修改自带的CEPH源 - For PVE 7.x1echo &quot;deb https://mirrors.ustc.edu.cn/proxmox/debian/ceph-pacific bullseye main&quot; &gt; /etc/apt/sources.list.d/ceph.list 6.更新 - For PVE 7.x1apt update -y &amp;&amp; apt dist-upgrade -y 二.更换内核版本2.1官方内核12345678910111213141516171819202122232425262728293031#查看已安装内核dpkg --get-selections |grep kernel# 查询线上最新内核apt search pve-kernel|grep pve-kernel-# 安装内核apt install pve-kernel-6.2.9-1-pveapt install pve-headers-6.2.9-1-pve#查看当前内核uname -a#查找内核apt-cache search linux | grep &#x27;PVE Kernel Image&#x27;#安装内核apt-get install pve-kernel-5.19.9-edge#查看当前系统内核启动顺序grep menuentry /boot/grub/grub.cfg#修改内核启动顺序nano /etc/default/grub#把默认的GRUB_DEFAULT=“0”改为GRUB_DEFAULT=&quot;Advanced options for Proxmox VE GNU/Linux&gt;Proxmox VE GNU/Linux, with Linux 6.8.12-1-pve&quot;#更新引导并重启update-grubreboot 2.2添加高版本内核源12345#Add the repository&#x27;s GPG key:curl -1sLf &#x27;https://dl.cloudsmith.io/public/pve-edge/kernel/gpg.8EC01CCF309B98E7.key&#x27; | gpg --dearmor -o /usr/share/keyrings/pve-edge-kernel.gpg#Set up the pve-edge-kernel repository:echo &quot;deb [signed-by=/usr/share/keyrings/pve-edge-kernel.gpg] https://dl.cloudsmith.io/public/pve-edge/kernel/deb/debian bullseye main&quot; &gt; /etc/apt/sources.list.d/pve-edge-kernel.list 三.删除未使用内核12345#删除所有不必要的包apt-get --purge autoremove#删除指定内核apt-get --purge remove pve-kernel-6.8.12-1-pve 固定内核1234proxmox-boot-tool kernel listproxmox-boot-tool kernel pin 6.8.12-1-pveproxmox-boot-tool refreshreboot","tags":["Proxmox","软路由"]},{"title":"PVE 安装群晖7.0系统","path":"/2022/06/24/XBoard-系统搭建/","content":"https://bulianglin.com/archives/air.htmlhttps://v2rayssr.com/reality.html Xboard面板(基于v2board二次开发)：https://github.com/cedar2025/Xboard SSPanel面板：https://github.com/Anankke/SSPanel-UIM/ XrayR：[https://github.com/XrayR-project/XrayR Sub-Store：https://github.com/sub-store-org/Sub-Store Docker-Compose 部署教程本文教你如何在命令行使用docker-compose + sqlite来快速部署Xboard如果你需要使用Mysql，你需要自行处理好Mysql的安装。 部署 (使用docker-compose 2分钟部署) 在此提供Xboard安装、快速体验Xboard的步骤。使用docker compose + sqlite 快速部署站点（无需安装Mysql以及redis） 安装docker 123curl -sSL https://get.docker.com | bashsystemctl enable dockersystemctl start docker 获取Docker compose 文件 12git clone -b docker-compose --depth 1 https://github.com/cedar2025/Xboardcd Xboard 执行数据库安装命令 选择 启用sqlite 和 Docker内置的Redis 1docker compose run -it --rm xboard php artisan xboard:install 执行这条命令之后，会返回你的后台地址和管理员账号密码（你需要记录下来）你需要执行下面的 启动xborad 步骤之后才能访问后台 启动Xboard 1docker compose up -d 安装完成之后即可访问你的站点 访问站点启动之后网站端口默认为7001, 你可以配置nginx反向代理使用80端口 网站地址: http:&#x2F;&#x2F;你的IP:7001&#x2F;在此你已经成功部署了, 你可以访问网址体验Xboard的完整功能， 如果你需要使用mysql，请自行安装Mysql后重新部署 更新 修改版本 12cd Xboardvi docker-compose.yaml 修改docker-compose.yaml 当中image后面的版本号为你需要的版本如果为版本为latest 则可以忽略这一步，直接进行第二步 更新数据库（可以执行多次都是安全的） 1234docker compose pulldocker compose downdocker compose run -it --rm xboard php artisan xboard:updatedocker compose up -d 即可更新成功 回滚 此回滚不回滚数据库，是否回滚数据库请查看相关文档 回退版本 1vi docker-compose.yaml 修改docker-compose.yaml 当中image后面的版本号为更新前的版本号 启动 1docker compose up -d 注意启用webman后做的任何代码修改都需要重启生效 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&#123; &quot;domainStrategy&quot;: &quot;IPOnDemand&quot;, &quot;rules&quot;: [ &#123; &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [&quot;Shadowsocks_0.0.0.0_30000&quot;], &quot;outboundTag&quot;: &quot;hk1&quot; &#125;, &#123; &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [&quot;Shadowsocks_0.0.0.0_30001&quot;], &quot;outboundTag&quot;: &quot;tw1&quot; &#125;, &#123; &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [&quot;Shadowsocks_0.0.0.0_30002&quot;], &quot;outboundTag&quot;: &quot;jp1&quot; &#125;, &#123; &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [&quot;Shadowsocks_0.0.0.0_30003&quot;], &quot;outboundTag&quot;: &quot;sg1&quot; &#125;, &#123; &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [&quot;Shadowsocks_0.0.0.0_30004&quot;], &quot;outboundTag&quot;: &quot;kr1&quot; &#125;, &#123; &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [&quot;Shadowsocks_0.0.0.0_30005&quot;], &quot;outboundTag&quot;: &quot;us1&quot; &#125;, &#123; &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [&quot;Shadowsocks_0.0.0.0_30006&quot;], &quot;outboundTag&quot;: &quot;my1&quot; &#125;, &#123; &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [&quot;Shadowsocks_0.0.0.0_30007&quot;], &quot;outboundTag&quot;: &quot;ua1&quot; &#125; ]&#125; outbounds123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123[ &#123; &quot;tag&quot;: &quot;IPv4_out&quot;, &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: &#123;&#125; &#125;, &#123; &quot;protocol&quot;: &quot;blackhole&quot;, &quot;tag&quot;: &quot;block&quot; &#125;, &#123; &quot;tag&quot;: &quot;hk1&quot;, &quot;protocol&quot;: &quot;shadowsocks&quot;, &quot;settings&quot;: &#123; &quot;servers&quot;: [ &#123; &quot;address&quot;: &quot;141.91.75.233&quot;, &quot;method&quot;: &quot;aes-128-gcm&quot;, &quot;password&quot;: &quot;e7c42a89-8153-4cb4-bf7c-0a113d2ac6d7&quot;, &quot;port&quot;: 10001 &#125; ] &#125; &#125;, &#123; &quot;tag&quot;: &quot;tw1&quot;, &quot;protocol&quot;: &quot;shadowsocks&quot;, &quot;settings&quot;: &#123; &quot;servers&quot;: [ &#123; &quot;address&quot;: &quot;61.124.127.25&quot;, &quot;method&quot;: &quot;aes-128-gcm&quot;, &quot;password&quot;: &quot;e7c42a89-8153-4cb4-bf7c-0a113d2ac6d7&quot;, &quot;port&quot;: 10003 &#125; ] &#125; &#125;, &#123; &quot;tag&quot;: &quot;jp1&quot;, &quot;protocol&quot;: &quot;shadowsocks&quot;, &quot;settings&quot;: &#123; &quot;servers&quot;: [ &#123; &quot;address&quot;: &quot;212.17.195.238&quot;, &quot;method&quot;: &quot;aes-128-gcm&quot;, &quot;password&quot;: &quot;e7c42a89-8153-4cb4-bf7c-0a113d2ac6d7&quot;, &quot;port&quot;: 10003 &#125; ] &#125; &#125;, &#123; &quot;tag&quot;: &quot;sg1&quot;, &quot;protocol&quot;: &quot;shadowsocks&quot;, &quot;settings&quot;: &#123; &quot;servers&quot;: [ &#123; &quot;address&quot;: &quot;154.11.47.139&quot;, &quot;method&quot;: &quot;aes-128-gcm&quot;, &quot;password&quot;: &quot;e7c42a89-8153-4cb4-bf7c-0a113d2ac6d7&quot;, &quot;port&quot;: 10003 &#125; ] &#125; &#125;, &#123; &quot;tag&quot;: &quot;kr1&quot;, &quot;protocol&quot;: &quot;shadowsocks&quot;, &quot;settings&quot;: &#123; &quot;servers&quot;: [ &#123; &quot;address&quot;: &quot;141.56.96.109&quot;, &quot;method&quot;: &quot;aes-128-gcm&quot;, &quot;password&quot;: &quot;e7c42a89-8153-4cb4-bf7c-0a113d2ac6d7&quot;, &quot;port&quot;: 50053 &#125; ] &#125; &#125;, &#123; &quot;tag&quot;: &quot;us1&quot;, &quot;protocol&quot;: &quot;shadowsocks&quot;, &quot;settings&quot;: &#123; &quot;servers&quot;: [ &#123; &quot;address&quot;: &quot;23.241.137.34&quot;, &quot;method&quot;: &quot;aes-128-gcm&quot;, &quot;password&quot;: &quot;e7c42a89-8153-4cb4-bf7c-0a113d2ac6d7&quot;, &quot;port&quot;: 10001 &#125; ] &#125; &#125;, &#123; &quot;tag&quot;: &quot;my1&quot;, &quot;protocol&quot;: &quot;shadowsocks&quot;, &quot;settings&quot;: &#123; &quot;servers&quot;: [ &#123; &quot;address&quot;: &quot;103.121.239.214&quot;, &quot;method&quot;: &quot;aes-128-gcm&quot;, &quot;password&quot;: &quot;e7c42a89-8153-4cb4-bf7c-0a113d2ac6d7&quot;, &quot;port&quot;: 10001 &#125; ] &#125; &#125;, &#123; &quot;tag&quot;: &quot;ua1&quot;, &quot;protocol&quot;: &quot;shadowsocks&quot;, &quot;settings&quot;: &#123; &quot;servers&quot;: [ &#123; &quot;address&quot;: &quot;92.111.231.47&quot;, &quot;method&quot;: &quot;aes-128-gcm&quot;, &quot;password&quot;: &quot;e7c42a89-8153-4cb4-bf7c-0a113d2ac6d7&quot;, &quot;port&quot;: 10001 &#125; ] &#125; &#125;] IPV4 与 IPV6设置12345678910111213141516171819202122#### 通过脚本设定 (推荐)**脚本支持**: IPv4/IPv6 优先级调整; 启用 / 禁用 IPv6bash &lt;(curl -Lso- https://sh.vps.dance/ip46.sh)手动 禁用 VPS 的 IPv6 命令sysctl -w net.ipv6.conf.all.disable_ipv6=1sysctl -w net.ipv6.conf.default.disable_ipv6=1如果想重启系统也生效， 执行echo &#x27;net.ipv6.conf.all.disable_ipv6=1&#x27; &gt;&gt; /etc/sysctl.confecho &#x27;net.ipv6.conf.default.disable_ipv6=1&#x27; &gt;&gt; /etc/sysctl.conf手动 启用 VPS 的 IPv6 命令重新载入 sysctl 配置如果重载, 还无效果, 可能要 `reboot` 重启下.#### 查看 VPS 的 IPv6 信息输入命令: `ip -6 addr show scope global` 或者 `curl ipv6.ip.sb` 云主机测试https://github.com/oneclickvirt/ecs?tab=readme-ov-file IP地址测试https://github.com/xykt/IPQuality 3XUIhttps://github.com/MHSanaei/3x-ui IP在线地址测试https://ping.pe/https://ipinfo.io/","tags":["Proxmox","软路由"]},{"title":"PVE 挂载img磁盘镜像文件","path":"/2022/06/24/PVE 挂载img磁盘镜像文件/","content":"PVE下挂载一个img磁盘镜像是分为两步的： 使用 fdisk 命令得知这个img磁盘镜像中各个分区的起始位置，就是偏移量； 使用 mount 把磁盘镜像以回环设备的形式挂载到文件系统的某个目录上，需要指定分区的偏移量。 假设 DS918_7.21.img 已经存在于 &#x2F;var&#x2F;lib&#x2F;vz&#x2F;template&#x2F;iso&#x2F; 目录下,可以查看这个回环设备的分区信息： 123456789101112➜ / fdisk -lu /var/lib/vz/template/iso/DS918_7.21.imgDisk /var/lib/vz/template/iso/DS918_7.21.img: 1 GiB, 1073741824 bytes, 2097152 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x16af7bb3Device Boot Start End Sectors Size Id Type/var/lib/vz/template/iso/DS918_7.21.img1 * 2048 104447 102400 50M 83 Linux/var/lib/vz/template/iso/DS918_7.21.img2 104448 206847 102400 50M 83 Linux/var/lib/vz/template/iso/DS918_7.21.img3 206848 2097151 1890304 923M 83 Linux 运行结果如下： 可以得知第一个分区的起始位置是在整个磁盘的第 2048 扇区（从0计数），而每一个扇区大小是512字节，所以第一个分区的偏移量是 2048 * 512 &#x3D; 1048576。其实，如果你预先已经知道了各个分区的偏移量，那么之前的这些操作都可以跳过，直接进行下面的操作。上面的这些操作，就是为了获知分区的偏移量的。 为了挂载第一个分区，使用如下命令： 12mkdir /mnt/imgmount -o loop,offset=1048576 /var/lib/vz/template/iso/DS918_7.21.img /mnt/img 执行之后，img文件中的第一个分区就已经挂载在了 img 目录上了，挂载其它分区也是类似的。 12➜ img lsARPL-VERSION boot EFI grub_cksum.syno GRUB_VER logs user-config.yml 取消挂载操作 1umount /mnt/img","tags":["Proxmox","软路由"]},{"title":"PVE 安装后需要做的事情","path":"/2022/06/23/PVE 安装后需要做的事情/","content":"PVE更换国内源备份源文件1cp /etc/apt/sources.list /etc/apt/sources.list.backup 添加国内源脚本1 123456789cat &lt;&lt;EOF &gt; /etc/apt/sources.listdeb http://mirrors.ustc.edu.cn/debian/ bookworm main non-free-firmwaredeb-src http://mirrors.ustc.edu.cn/debian/ bookworm main non-free-firmwaredeb https://mirrors.ustc.edu.cn/debian-security bookworm-security main contribdeb http://mirrors.ustc.edu.cn/debian/ bookworm-updates main non-free-firmwaredeb-src http://mirrors.ustc.edu.cn/debian/ bookworm-updates main non-free-firmwareEOF 脚本2 1echo &quot;deb https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian bookworm pve-no-subscription&quot; &gt; /etc/apt/sources.list.d/pve-no-subscription.list 屏蔽企业源1sed -i &#x27;s/^deb https:\\/\\/enterprise.proxmox.com\\/debian\\/pve/#deb https:\\/\\/enterprise.proxmox.com\\/debian\\/pve/&#x27; /etc/apt/sources.list.d/pve-enterprise.list 屏蔽 Ceph 源1sed -i &#x27;s/^deb https:\\/\\/enterprise.proxmox.com\\/debian\\/ceph-quincy/#deb https:\\/\\/enterprise.proxmox.com\\/debian\\/ceph-quincy/&#x27; /etc/apt/sources.list.d/ceph.list 更新系统1apt update &amp;&amp; apt dist-upgrade PVE 硬盘操作初始化磁盘 fdisk &#x2F;dev&#x2F;sdc 12345进入fdisk输入 p 查看磁盘分区输入 d 删除分区输入 w 保存在命令行中查看磁盘 S.M.A.R.T 信息： smartctl -a /dev/sdc 文件路径12345## 文件路径Backups - /var/lib/vz/dumpISOs - /var/lib/vz/template/isoImages - /var/lib/vz/imagesTemplates - /var/lib/vz/template/cache 挂载 Img 文件12345678910111213141516171819// 查看信息fdisk /var/lib/vz/template/iso/DS918_7.1.1.img// 获取位置偏移信息 2048 * 512 = 1048576Command (m for help): pDisk /var/lib/vz/template/iso/DS918_7.1.1.img: 160 MiB, 167772160 bytes, 327680 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x1ef471e9Device Boot Start End Sectors Size Id Type/var/lib/vz/template/iso/DS918_7.1.1.img1 2048 133119 131072 64M 83 Linux/var/lib/vz/template/iso/DS918_7.1.1.img2 133120 319487 186368 91M 83 Linux/var/lib/vz/template/iso/DS918_7.1.1.img3 319488 327679 8192 4M 83 Linux// 挂在磁盘mount -o loop,offset=1048576 /var/lib/vz/template/iso/DS918_7.1.1.img /mnt/img PVE 硬件直通打开 iommu &amp; pci passthrough直通硬件，主板支持 iommu 1nano /etc/default/grub Inter cpu填写 intel_iommu&#x3D;onAMD CPU填写 amd_iommu&#x3D;on填写完 使用 update-grub 更新 grub命令行运行 dmesg | grep -e DMAR -e IOMMU 如果没有输出，则说明有问题。 1nano /etc/modules 更新完后 reboot 系统。 其他参数：关闭核显， 1video=efifb:off 硬盘直通1234567891011apt-get install lshw# 查看硬盘IDls -l /dev/disk/by-id# 设置qm set 103 --sata1 /dev/disk/by-id/ata-TOSHIBAXXXqm set 103 --sata2 /dev/disk/by-id/ata-ST1000LXXX# 无需借助任何软件直接转换openwrt的img文件为虚拟磁盘qm importdisk 101 /var/lib/vz/template/iso/openwrt_esir.img local-lvm GPU直通设置 grubnano &#x2F;etc&#x2F;default&#x2F;grub 12// 修改此处GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on pcie_acs_override=downstream,multifunction video=efifb:eek:ff&quot; update-grub设置 modules. nano &#x2F;etc&#x2F;modules 1234vfiovfio_iommu_type1vfio_pcivfio_virqfd 修改虚拟机配置文件 修改cpunano &#x2F;etc&#x2F;pve&#x2F;qemu-server&#x2F;100.conf 1234567891011121314151617181920212223agent: 1balloon: 4096bios: ovmfboot: cdnbootdisk: virtio0cores: 8cpu: host,hidden=1,flags=+pcidefidisk0: fast1:vm-100-disk-1,size=128Khostpci0: 02:00,pcie=1,x-vga=1hostpci1: 04:00.0,rombar=0ide0: none,media=cdrommachine: q35memory: 14336name: beamnuma: 0ostype: win10scsihw: virtio-scsi-pcismbios1: uuid=d6febb0d-4242-4bdb-8aea-7c03e7b5df0esockets: 1unused0: storage1:vm-100-disk-0unused1: slow1:vm-100-disk-0virtio0: fast1:vm-100-disk-0,size=80Gvmgenid: 524a58dd-7e3e-44f4-abf4-9de0f490d936 屏蔽掉系统驱动nano &#x2F;etc&#x2F;modprobe.d&#x2F;pve-blacklist.conf 1234blacklist nvidiafbblacklist nvidiablacklist radeonblacklist nouveau PVE 网络操作添加 VLan 桥接网口 查看网络端口信息 1nano /etc/network/interfaces 网络配置网络测速123456789# speedtestsudo apt install speedtest-clispeedtest# fastapt-get install npmnpm install --global fast-clifastfast -u 配置网关1234# Editnano /etc/network/interfaces# 重启网络/etc/init.d/networking restart 配置 IPV6按下面的操作修改配置文件后即可正常获取 IPv6。 注意：本教程是让你的 PVE 主机 和 LXC 容器获取 IPv6 地址，如果你虚拟机和其他下连设备出现问题，请先确定是不是你自己的问题 修改配置文件 nano /etc/sysctl.conf 把文件内容替换为 &#x2F; 在末尾加上下面的内容 123456net.ipv6.conf.all.accept_ra=2net.ipv6.conf.default.accept_ra=2net.ipv6.conf.vmbr0.accept_ra=2net.ipv6.conf.all.autoconf=2net.ipv6.conf.default.autoconf=2net.ipv6.conf.vmbr0.autoconf=2 另外备注一下：LXC 容器 获取 IPv6 地址要设置成 SLAAC 才能获取地址 (设置为 SLAAC 后既可以 DHCPv6 有状态，也可以 SLAAC 无状态，设置为 DHCP 只能拿到 Link-Local 链路地址) LXC 容器修改完网络设置重启对应容器即可，重启之后检查一下 PVE 主机和 LXC 容器有没有拿到地址 12345678910111213# ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 10.20.6.9 netmask 255.224.0.0 broadcast 10.31.255.255 inet6 2408:8210::18a9:1eff:fee2:600c prefixlen 64 scopeid 0x0&lt;global&gt; inet6 2408:8210::10:20:6:9 prefixlen 128 scopeid 0x0&lt;global&gt; inet6 fe80::18a9:1eff:fee2:600c prefixlen 64 scopeid 0x20&lt;link&gt; ether 1a:a9:1e:e2:60:0c txqueuelen 1000 (Ethernet) RX packets 134 bytes 33534 (33.5 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 126 bytes 24570 (24.5 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 可以看到同时通过 DHCPv6 和 SLAAC 拿到了地址 其他资料https://github.com/xiangfeidexiaohuo/ProxmoxVE-7.0-DIYhttps://bbs.x86pi.cn/thread?topicId=20&amp;page=351https://www.cloudstaymoon.com/2024/04/10/all-in-one-1https://www.vumstar.com/3897/https://github.com/strongtz/i915-sriov-dkms","tags":["Proxmox","软路由"]},{"title":"PVE 安装 ROS 主路由系统","path":"/2022/06/23/PVE 安装 ROS 主路由系统/","content":"下载 Mikrotik ROS 系统普通系统可以从这里下载： https://mikrotik.com/download如果是虚拟机从这里下载: https://mikrotik.com/download/archive 虚拟机版本可以使用账号激活正版使用60天，过期后也可以继续使用。参考： https://help.mikrotik.com/docs/pages/viewpage.action?pageId=18350234 基础设置设置Bridge12345678/interface bridgeadd name=bridge1 comment=&quot;defconf: local Bridge&quot; auto-mac=yes/interface bridge portadd bridge=bridge1 interface=ether1add bridge=bridge1 interface=ether2add bridge=bridge1 interface=ether3add bridge=bridge1 interface=ether5 定义 PPPoE 接口组12345678910/interface listadd name=WAN comment=&quot;defconf: extranet list&quot;add name=LAN comment=&quot;defconf: intranet list&quot;add name=ONU comment=&quot;onuconf: ONU list&quot;/interface list member// add list=WAN comment=&quot;defconf: extranet member&quot; interface=ether4add list=WAN comment=&quot;defconf: extranet member&quot; interface=pppoe-out1add list=LAN comment=&quot;defconf: intranet member&quot; interface=bridge1add list=ONU comment=&quot;onuconf: ONU member&quot; interface=ether4 iPV4防火墙123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201## Filter 规则 19 条 + 虚拟规则 1 条## NAT 规则 6 条## Mangle 规则 2 条 + 虚拟规则 3 条## Raw 规则 41 条 + 虚拟规则 1 条## Address-list 规则 29 条/ip firewall address-listadd address=192.168.1.1 comment=&quot;onuconf: local ONU address&quot; list=local_onu_ipv4add address=10.0.0.0/24 comment=&quot;lanconf: local LAN address&quot; list=local_lan_ipv4add address=10.0.0.1 comment=&quot;lanconf: local DNS server&quot; list=local_dns_ipv4add address=0.0.0.0/8 comment=&quot;defconf: RFC6890 - this network&quot; list=no_forward_ipv4add address=169.254.0.0/16 comment=&quot;defconf: RFC6890 - link local&quot; list=no_forward_ipv4add address=224.0.0.0/4 comment=&quot;defconf: RFC5771 - multicast&quot; list=no_forward_ipv4add address=255.255.255.255/32 comment=&quot;defconf: RFC6890 - limited broadcast&quot; list=no_forward_ipv4add address=127.0.0.0/8 comment=&quot;defconf: RFC6890 - loopback&quot; list=bad_ipv4add address=192.0.0.0/24 comment=&quot;defconf: RFC6890 - reserved&quot; list=bad_ipv4add address=192.0.2.0/24 comment=&quot;defconf: RFC6890 - TEST-NET-1&quot; list=bad_ipv4add address=198.51.100.0/24 comment=&quot;defconf: RFC6890 - TEST-NET-2&quot; list=bad_ipv4add address=203.0.113.0/24 comment=&quot;defconf: RFC6890 - TEST-NET-3&quot; list=bad_ipv4add address=240.0.0.0/4 comment=&quot;defconf: RFC6890 - reserved&quot; list=bad_ipv4add address=0.0.0.0/8 comment=&quot;defconf: RFC6890 - this network&quot; list=not_global_ipv4add address=10.0.0.0/8 comment=&quot;defconf: RFC6890 - private networks&quot; list=not_global_ipv4add address=100.64.0.0/10 comment=&quot;defconf: RFC6890 - shared address&quot; list=not_global_ipv4add address=169.254.0.0/16 comment=&quot;defconf: RFC6890 - link local&quot; list=not_global_ipv4add address=172.16.0.0/12 comment=&quot;defconf: RFC6890 - private networks&quot; list=not_global_ipv4add address=192.0.0.0/29 comment=&quot;defconf: RFC6890 - DS-Lite&quot; list=not_global_ipv4add address=192.168.0.0/16 comment=&quot;defconf: RFC6890 - private networks&quot; list=not_global_ipv4add address=198.18.0.0/15 comment=&quot;defconf: RFC6890 - benchmarking&quot; list=not_global_ipv4add address=255.255.255.255/32 comment=&quot;defconf: RFC6890 - limited broadcast&quot; list=not_global_ipv4add address=224.0.0.0/4 comment=&quot;defconf: RFC5771 - multicast&quot; list=bad_src_ipv4add address=255.255.255.255/32 comment=&quot;defconf: RFC6890 - limited broadcast&quot; list=bad_src_ipv4add address=0.0.0.0/8 comment=&quot;defconf: RFC6890 - this network&quot; list=bad_dst_ipv4add address=0.0.0.0 comment=&quot;ddosconf: DDoS&quot; list=ddos_targets_ipv4add address=0.0.0.0 comment=&quot;ddosconf: DDoS&quot; list=ddos_attackers_ipv4/ip firewall filteradd action=accept chain=input comment=&quot;defconf: accept ICMP after RAW&quot; protocol=icmpadd action=accept chain=input comment=&quot;defconf: accept established,related,untracked&quot; connection-state=established,related,untrackedadd action=drop chain=input comment=&quot;defconf: drop invalid&quot; connection-state=invalid## add action=drop chain=input comment=&quot;defconf: drop all not from LAN&quot; in-interface-list=!LANadd action=fasttrack-connection chain=forward comment=&quot;defconf: fasttrack&quot; connection-state=established,relatedadd action=accept chain=forward comment=&quot;defconf: accept established,related,untracked&quot; connection-state=established,related,untrackedadd action=drop chain=forward comment=&quot;defconf: drop invalid&quot; connection-state=invalidadd action=drop chain=forward comment=&quot;defconf: drop all from WAN not DSTNATed&quot; connection-nat-state=!dstnat connection-state=new in-interface-list=WAN log=yes log-prefix=&quot;[wan-not-dnat]&quot;add action=drop chain=forward comment=&quot;onuconf: drop all from ONU not DSTNATed&quot; connection-nat-state=!dstnat connection-state=new in-interface-list=ONU log=yes log-prefix=&quot;[onu-not-dnat]&quot;add action=drop chain=forward comment=&quot;defconf: drop bad forward IPs&quot; src-address-list=no_forward_ipv4add action=drop chain=forward comment=&quot;defconf: drop bad forward IPs&quot; dst-address-list=no_forward_ipv4add action=jump chain=forward comment=&quot;ddosconf: DDoS SYN-ACK&quot; protocol=tcp tcp-flags=syn,ack jump-target=detect-syn-ackadd action=return chain=detect-syn-ack comment=&quot;ddosconf: DDoS SYN-ACK&quot; dst-limit=64,64,src-and-dst-addresses/10sadd action=add-dst-to-address-list chain=detect-syn-ack comment=&quot;ddosconf: DDoS SYN-ACK&quot; address-list=ddos_targets_ipv4 address-list-timeout=10madd action=add-src-to-address-list chain=detect-syn-ack comment=&quot;ddosconf: DDoS SYN-ACK&quot; address-list=ddos_attackers_ipv4 address-list-timeout=10m log=yes log-prefix=&quot;[sa-flood-ipv4]&quot;add action=jump chain=forward comment=&quot;ddosconf: DDoS&quot; connection-state=new jump-target=detect-ddosadd action=return chain=detect-ddos comment=&quot;ddosconf: DDoS&quot; dst-limit=256,256,src-and-dst-addresses/10sadd action=add-dst-to-address-list chain=detect-ddos comment=&quot;ddosconf: DDoS&quot; address-list=ddos_targets_ipv4 address-list-timeout=10madd action=add-src-to-address-list chain=detect-ddos comment=&quot;ddosconf: DDoS&quot; address-list=ddos_attackers_ipv4 address-list-timeout=10m log=yes log-prefix=&quot;[ddos-ipv4]&quot;/ip firewall natadd action=masquerade chain=srcnat comment=&quot;defconf: masquerade IPv4&quot; out-interface-list=WANadd action=masquerade chain=srcnat comment=&quot;onuconf: access to ONU&quot; out-interface-list=ONU src-address-list=local_lan_ipv4 dst-address-list=local_onu_ipv4add action=accept chain=dstnat comment=&quot;lanconf: accept local DNS server&#x27;s query (UDP)&quot; dst-port=53 in-interface-list=LAN protocol=udp src-address-list=local_dns_ipv4add action=accept chain=dstnat comment=&quot;lanconf: accept local DNS server&#x27;s query (TCP)&quot; dst-port=53 in-interface-list=LAN protocol=tcp src-address-list=local_dns_ipv4add action=redirect chain=dstnat comment=&quot;lanconf: redirect DNS query (UDP)&quot; dst-port=53 in-interface-list=LAN protocol=udp to-ports=53add action=redirect chain=dstnat comment=&quot;lanconf: redirect DNS query (TCP)&quot; dst-port=53 in-interface-list=LAN protocol=tcp to-ports=53/ip firewall mangleadd action=change-mss chain=forward comment=&quot;defconf: fix IPv4 mss for WAN&quot; new-mss=clamp-to-pmtu passthrough=yes protocol=tcp tcp-flags=synadd action=accept chain=prerouting comment=&quot;onuconf: access to ONU&quot; src-address-list=local_lan_ipv4 dst-address-list=local_onu_ipv4/ip firewall rawadd action=accept chain=prerouting comment=&quot;defconf: enable for transparent firewall&quot; disabled=yesadd action=drop chain=prerouting comment=&quot;ddosconf: DDoS&quot; dst-address-list=ddos_targets_ipv4 src-address-list=ddos_attackers_ipv4add action=accept chain=prerouting comment=&quot;defconf: accept DHCPv4 discover&quot; dst-address=255.255.255.255 dst-port=67 in-interface-list=LAN protocol=udp src-address=0.0.0.0 src-port=68add action=drop chain=prerouting comment=&quot;defconf: drop bogon IPs&quot; src-address-list=bad_ipv4add action=drop chain=prerouting comment=&quot;defconf: drop bogon IPs&quot; dst-address-list=bad_ipv4add action=drop chain=prerouting comment=&quot;defconf: drop bad SRC IPv4&quot; src-address-list=bad_src_ipv4add action=drop chain=prerouting comment=&quot;defconf: drop bad DST IPv4&quot; dst-address-list=bad_dst_ipv4add action=drop chain=prerouting comment=&quot;defconf: drop non global from WAN&quot; in-interface-list=WAN src-address-list=not_global_ipv4add action=drop chain=prerouting comment=&quot;defconf: drop forward to local LAN from WAN&quot; in-interface-list=WAN dst-address-list=local_lan_ipv4 log=yes log-prefix=&quot;[wan-to-lan]&quot;add action=drop chain=prerouting comment=&quot;onuconf: drop if not from ONU address&quot; in-interface-list=ONU src-address-list=!local_onu_ipv4add action=drop chain=prerouting comment=&quot;onuconf: drop forward to local LAN from ONU&quot; in-interface-list=ONU dst-address-list=local_lan_ipv4 log=yes log-prefix=&quot;[onu-to-lan]&quot;add action=drop chain=prerouting comment=&quot;defconf: drop if not from default IPv4 range&quot; in-interface-list=LAN src-address-list=!local_lan_ipv4add action=drop chain=prerouting comment=&quot;defconf: drop UDP port 0&quot; port=0 protocol=udp log=yes log-prefix=&quot;[udp-port-0]&quot;add action=jump chain=prerouting comment=&quot;defconf: jump to TCP chain&quot; jump-target=bad-tcp protocol=tcpadd action=jump chain=prerouting comment=&quot;defconf: jump to ICMP chain&quot; jump-target=icmp4 protocol=icmpadd action=accept chain=prerouting comment=&quot;defconf: accept everything else from LAN&quot; in-interface-list=LANadd action=accept chain=prerouting comment=&quot;defconf: accept everything else from WAN&quot; in-interface-list=WANadd action=accept chain=prerouting comment=&quot;onuconf: accept everything else from ONU&quot; in-interface-list=ONUadd action=drop chain=prerouting comment=&quot;defconf: drop the rest&quot;add action=drop chain=bad-tcp comment=&quot;defconf: drop TCP port 0&quot; port=0 protocol=tcp log=yes log-prefix=&quot;[tcp-port-0]&quot;add action=drop chain=bad-tcp comment=&quot;defconf: TCP flag filter&quot; protocol=tcp tcp-flags=!fin,!syn,!rst,!ackadd action=drop chain=bad-tcp comment=&quot;defconf: drop flags fin,syn&quot; protocol=tcp tcp-flags=fin,synadd action=drop chain=bad-tcp comment=&quot;defconf: drop flags fin,rst&quot; protocol=tcp tcp-flags=fin,rstadd action=drop chain=bad-tcp comment=&quot;defconf: drop flags fin,!ack&quot; protocol=tcp tcp-flags=fin,!ackadd action=drop chain=bad-tcp comment=&quot;defconf: drop flags fin,urg&quot; protocol=tcp tcp-flags=fin,urgadd action=drop chain=bad-tcp comment=&quot;defconf: drop flags syn,rst&quot; protocol=tcp tcp-flags=syn,rstadd action=drop chain=bad-tcp comment=&quot;defconf: drop flags rst,urg&quot; protocol=tcp tcp-flags=rst,urgadd action=accept chain=icmp4 comment=&quot;defconf: echo reply&quot; icmp-options=0:0 protocol=icmpadd action=drop chain=icmp4 comment=&quot;onuconf: drop other ICMP from ONU&quot; protocol=icmp in-interface-list=ONU log=yes log-prefix=&quot;[onu-icmp]&quot;add action=accept chain=icmp4 comment=&quot;defconf: host unreachable&quot; icmp-options=3:1 protocol=icmpadd action=accept chain=icmp4 comment=&quot;defconf: port unreachable&quot; icmp-options=3:3 protocol=icmpadd action=accept chain=icmp4 comment=&quot;defconf: fragmentation needed&quot; icmp-options=3:4 protocol=icmpadd action=accept chain=icmp4 comment=&quot;defconf: time exceeded&quot; icmp-options=11:0-255 protocol=icmpadd action=drop chain=icmp4 comment=&quot;lanconf: drop other ICMP from WAN&quot; protocol=icmp in-interface-list=WANadd action=accept chain=icmp4 comment=&quot;defconf: net unreachable&quot; icmp-options=3:0 protocol=icmpadd action=accept chain=icmp4 comment=&quot;defconf: protocol unreachable&quot; icmp-options=3:2 protocol=icmpadd action=accept chain=icmp4 comment=&quot;lanconf: echo to local device&quot; icmp-options=8:0 protocol=icmp dst-address-list=local_lan_ipv4add action=accept chain=icmp4 comment=&quot;onuconf: echo to ONU&quot; icmp-options=8:0 protocol=icmp dst-address-list=local_onu_ipv4add action=drop chain=icmp4 comment=&quot;lanconf: echo to non global&quot; icmp-options=8:0 protocol=icmp dst-address-list=not_global_ipv4add action=accept chain=icmp4 comment=&quot;lanconf: echo to WAN&quot; icmp-options=8:0 protocol=icmpadd action=drop chain=icmp4 comment=&quot;defconf: drop all other ICMP&quot; protocol=icmp/ip firewall connection trackingset tcp-syn-sent-timeout=120sset tcp-syn-received-timeout=60sset tcp-established-timeout=7440sset tcp-fin-wait-timeout=120sset tcp-close-wait-timeout=60sset tcp-last-ack-timeout=30sset tcp-time-wait-timeout=120sset tcp-close-timeout=10sset tcp-max-retrans-timeout=300sset tcp-unacked-timeout=300sset udp-timeout=30sset udp-stream-timeout=120sset icmp-timeout=30sset generic-timeout=600s/ip settingsset max-neighbor-entries=1024 rp-filter=loose tcp-syncookies=yes/ip neighbor discovery-settingsset discover-interface-list=none/ip proxyset enabled=no/ip socksset enabled=no/ip upnpset enabled=no/ip cloudset ddns-enabled=no update-time=no/ip sshset strong-crypto=yes/tool mac-server## set allowed-interface-list=none/tool mac-server mac-winbox## set allowed-interface-list=none/tool mac-server ping## 安全设置关闭set enabled=no/tool bandwidth-serverset enabled=no 设置 IPv4 黑洞路由12345678910111213141516/ip routeadd blackhole comment=&quot;defconf: RFC6890 - this network&quot; disabled=no dst-address=0.0.0.0/8add blackhole comment=&quot;defconf: RFC6890 - private networks&quot; disabled=no dst-address=10.0.0.0/8add blackhole comment=&quot;defconf: RFC6890 - shared address&quot; disabled=no dst-address=100.64.0.0/10add blackhole comment=&quot;defconf: RFC6890 - link local&quot; disabled=no dst-address=169.254.0.0/16add blackhole comment=&quot;defconf: RFC6890 - private networks&quot; disabled=no dst-address=172.16.0.0/12add blackhole comment=&quot;defconf: RFC6890 - reserved&quot; disabled=no dst-address=192.0.0.0/24add blackhole comment=&quot;defconf: RFC6890 - DS-Lite&quot; disabled=no dst-address=192.0.0.0/29add blackhole comment=&quot;defconf: RFC6890 - TEST-NET-1&quot; disabled=no dst-address=192.0.2.0/24add blackhole comment=&quot;defconf: RFC6890 - 6to4 relay&quot; disabled=no dst-address=192.88.99.0/24add blackhole comment=&quot;defconf: RFC6890 - private networks&quot; disabled=no dst-address=192.168.0.0/16add blackhole comment=&quot;defconf: RFC6890 - benchmarking&quot; disabled=no dst-address=198.18.0.0/15add blackhole comment=&quot;defconf: RFC6890 - TEST-NET-2&quot; disabled=no dst-address=198.51.100.0/24add blackhole comment=&quot;defconf: RFC6890 - TEST-NET-3&quot; disabled=no dst-address=203.0.113.0/24add blackhole comment=&quot;defconf: RFC6890 - reserved&quot; disabled=no dst-address=240.0.0.0/4 iPV6防火墙123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129## Filter 规则 13 条## NAT 规则 3 条## Mangle 规则 1 条## Raw 规则 47 条## Address-list 规则 17 条/ipv6 firewall address-listadd address=fe80::/10 comment=&quot;defconf: RFC6890 - link local&quot; list=no_forward_ipv6add address=ff00::/8 comment=&quot;defconf: RFC3513 - multicast&quot; list=no_forward_ipv6add address=::1/128 comment=&quot;defconf: RFC6890 - loopback&quot; list=bad_ipv6add address=0000::/96 comment=&quot;defconf: RFC4291 - IPv4 compatible&quot; list=bad_ipv6add address=::ffff:0:0/96 comment=&quot;defconf: RFC6890 - IPv4 mapped&quot; list=bad_ipv6add address=2001::/23 comment=&quot;defconf: RFC6890 - reserved&quot; list=bad_ipv6add address=2001:db8::/32 comment=&quot;defconf: RFC6890 - documentation&quot; list=bad_ipv6add address=2001:10::/28 comment=&quot;defconf: RFC4843 - ORCHID&quot; list=bad_ipv6add address=2001:20::/28 comment=&quot;defconf: RFC7343 - ORCHIDv2&quot; list=bad_ipv6add address=100::/64 comment=&quot;defconf: RFC6890 - discard-only&quot; list=not_global_ipv6add address=2001::/32 comment=&quot;defconf: RFC6890 - TEREDO&quot; list=not_global_ipv6add address=2001:2::/48 comment=&quot;defconf: RFC6890 - benchmarking&quot; list=not_global_ipv6add address=fc00::/7 comment=&quot;defconf: RFC6890 - unique local&quot; list=not_global_ipv6add address=fec0::/10 comment=&quot;defconf: RFC3879 - site local&quot; list=not_global_ipv6add address=::/128 comment=&quot;defconf: RFC6890 - unspecified&quot; list=bad_src_ipv6add address=ff00::/8 comment=&quot;defconf: RFC3513 - multicast&quot; list=bad_src_ipv6add address=::/128 comment=&quot;defconf: RFC6890 - unspecified&quot; list=bad_dst_ipv6/ipv6 firewall filteradd action=accept chain=input comment=&quot;defconf: accept ICMPv6 after RAW&quot; protocol=icmpv6add action=accept chain=input comment=&quot;defconf: accept established,related,untracked&quot; connection-state=established,related,untrackedadd action=drop chain=input comment=&quot;defconf: drop invalid&quot; connection-state=invalidadd action=accept chain=input comment=&quot;defconf: accept UDP traceroute&quot; port=33434-33534 protocol=udpadd action=accept chain=input comment=&quot;defconf: accept DHCPv6-Client prefix delegation&quot; dst-port=546 protocol=udp src-address=fe80::/10 log=yes log-prefix=&quot;[ipv6-pd]&quot;add action=drop chain=input comment=&quot;defconf: drop all not from LAN&quot; in-interface-list=!LANadd action=accept chain=forward comment=&quot;defconf: accept established,related,untracked&quot; connection-state=established,related,untrackedadd action=drop chain=forward comment=&quot;defconf: drop invalid&quot; connection-state=invalidadd action=drop chain=forward comment=&quot;defconf: drop bad forward IPs&quot; src-address-list=no_forward_ipv6add action=drop chain=forward comment=&quot;defconf: drop bad forward IPs&quot; dst-address-list=no_forward_ipv6add action=drop chain=forward comment=&quot;defconf: rfc4890 drop hop-limit=1&quot; hop-limit=equal:1 protocol=icmpv6add action=accept chain=forward comment=&quot;defconf: accept ICMPv6 after RAW&quot; protocol=icmpv6## add action=drop chain=forward comment=&quot;defconf: drop all not from LAN&quot; in-interface-list=!LAN/ipv6 firewall natadd action=masquerade chain=srcnat comment=&quot;defconf: masquerade IPv6&quot; out-interface-list=WAN disabled=yesadd action=redirect chain=dstnat comment=&quot;lanconf: redirect DNS query (UDP)&quot; dst-port=53 in-interface-list=LAN protocol=udp to-ports=53add action=redirect chain=dstnat comment=&quot;lanconf: redirect DNS query (TCP)&quot; dst-port=53 in-interface-list=LAN protocol=tcp to-ports=53/ipv6 firewall mangleadd action=change-mss chain=forward comment=&quot;defconf: fix IPv6 mss for WAN&quot; new-mss=clamp-to-pmtu passthrough=yes protocol=tcp tcp-flags=syn/ipv6 firewall rawadd action=accept chain=prerouting comment=&quot;defconf: enable for transparent firewall&quot; disabled=yesadd action=drop chain=prerouting comment=&quot;defconf: drop IPv6 extension headers types 0,43&quot; headers=hop,route:containsadd action=accept chain=prerouting comment=&quot;defconf: RFC4291, section 2.7.1&quot; dst-address=ff02:0:0:0:0:1:ff00::/104 icmp-options=135 protocol=icmpv6 src-address=::/128add action=drop chain=prerouting comment=&quot;defconf: drop bogon IPs&quot; src-address-list=bad_ipv6add action=drop chain=prerouting comment=&quot;defconf: drop bogon IPs&quot; dst-address-list=bad_ipv6add action=drop chain=prerouting comment=&quot;defconf: drop bad SRC IPv6&quot; src-address-list=bad_src_ipv6add action=drop chain=prerouting comment=&quot;defconf: drop bad DST IPv6&quot; dst-address-list=bad_dst_ipv6add action=drop chain=prerouting comment=&quot;defconf: drop non global from WAN&quot; in-interface-list=WAN src-address-list=not_global_ipv6add action=drop chain=prerouting comment=&quot;defconf: drop UDP port 0&quot; port=0 protocol=udp log=yes log-prefix=&quot;[udp-port-0]&quot;add action=jump chain=prerouting comment=&quot;defconf: jump to TCP chain&quot; jump-target=bad-tcp protocol=tcpadd action=jump chain=prerouting comment=&quot;defconf: jump to ICMPv6 chain&quot; jump-target=icmp6 protocol=icmpv6add action=accept chain=prerouting comment=&quot;defconf: accept local multicast scope&quot; dst-address=ff02::/16add action=drop chain=prerouting comment=&quot;defconf: drop other multicast destinations&quot; dst-address=ff00::/8add action=accept chain=prerouting comment=&quot;defconf: accept everything else from LAN&quot; in-interface-list=LANadd action=accept chain=prerouting comment=&quot;defconf: accept everything else from WAN&quot; in-interface-list=WANadd action=drop chain=prerouting comment=&quot;defconf: drop the rest&quot;add action=drop chain=bad-tcp comment=&quot;defconf: drop TCP port 0&quot; port=0 protocol=tcp log=yes log-prefix=&quot;[tcp-port-0]&quot;add action=drop chain=bad-tcp comment=&quot;defconf: TCP flag filter&quot; protocol=tcp tcp-flags=!fin,!syn,!rst,!ackadd action=drop chain=bad-tcp comment=&quot;defconf: drop flags fin,syn&quot; protocol=tcp tcp-flags=fin,synadd action=drop chain=bad-tcp comment=&quot;defconf: drop flags fin,rst&quot; protocol=tcp tcp-flags=fin,rstadd action=drop chain=bad-tcp comment=&quot;defconf: drop flags fin,!ack&quot; protocol=tcp tcp-flags=fin,!ackadd action=drop chain=bad-tcp comment=&quot;defconf: drop flags fin,urg&quot; protocol=tcp tcp-flags=fin,urgadd action=drop chain=bad-tcp comment=&quot;defconf: drop flags syn,rst&quot; protocol=tcp tcp-flags=syn,rstadd action=drop chain=bad-tcp comment=&quot;defconf: drop flags rst,urg&quot; protocol=tcp tcp-flags=rst,urgadd action=accept chain=icmp6 comment=&quot;defconf: rfc4890 DST unreachable&quot; icmp-options=1:0-255 protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 packet too big&quot; icmp-options=2:0-255 protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 time exceeded&quot; icmp-options=3:0-1 protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 parameter problem&quot; icmp-options=4:0-2 protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 echo request&quot; icmp-options=128:0-255 protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 echo response&quot; icmp-options=129:0-255 protocol=icmpv6add action=drop chain=icmp6 comment=&quot;defconf: rfc4890 drop ll if hop-limit!=255&quot; dst-address=fe80::/10 hop-limit=not-equal:255 protocol=icmpv6 log=yes log-prefix=&quot;[ipv6-hop-limit]&quot;add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 multicast listener query only LAN&quot; src-address=fe80::/10 icmp-options=130:0-255 in-interface-list=LAN protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 multicast listener report only LAN&quot; src-address=fe80::/10 icmp-options=131:0-255 in-interface-list=LAN protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 multicast listener done only LAN&quot; src-address=fe80::/10 icmp-options=132:0-255 in-interface-list=LAN protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 multicast listener report v2 only LAN&quot; src-address=fe80::/10 icmp-options=143:0-255 in-interface-list=LAN protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 router solic only LAN&quot; hop-limit=equal:255 icmp-options=133:0-255 in-interface-list=LAN protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 router advert only LAN&quot; hop-limit=equal:255 icmp-options=134:0-255 in-interface-list=LAN protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 neighbor solic only LAN&quot; hop-limit=equal:255 icmp-options=135:0-255 in-interface-list=LAN protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 neighbor advert only LAN&quot; hop-limit=equal:255 icmp-options=136:0-255 in-interface-list=LAN protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 inverse ND solic only LAN&quot; hop-limit=equal:255 icmp-options=141:0-255 in-interface-list=LAN protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 inverse ND advert only LAN&quot; hop-limit=equal:255 icmp-options=142:0-255 in-interface-list=LAN protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 certificate path solicitation only LAN&quot; hop-limit=equal:255 icmp-options=148:0-255 in-interface-list=LAN protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 certificate path advertisement only LAN&quot; hop-limit=equal:255 icmp-options=149:0-255 in-interface-list=LAN protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 multicast router advertisement only LAN&quot; src-address=fe80::/10 hop-limit=equal:1 icmp-options=151:0-255 in-interface-list=LAN protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 multicast router solicitation only LAN&quot; src-address=fe80::/10 hop-limit=equal:1 icmp-options=152:0-255 in-interface-list=LAN protocol=icmpv6add action=accept chain=icmp6 comment=&quot;defconf: rfc4890 multicast router termination only LAN&quot; src-address=fe80::/10 hop-limit=equal:1 icmp-options=153:0-255 in-interface-list=LAN protocol=icmpv6add action=drop chain=icmp6 comment=&quot;defconf: drop all other ICMPv6&quot; protocol=icmpv6 设置 IPv6 黑洞路由&#96;&#96;&#96;12345678910111213141516/ipv6 routeadd blackhole comment=&quot;defconf: RFC6890 - unspecified&quot; disabled=no dst-address=::/128add blackhole comment=&quot;defconf: RFC4291 - IPv4 compatible&quot; disabled=no dst-address=0000::/96add blackhole comment=&quot;defconf: RFC6890 - IPv4 mapped&quot; disabled=no dst-address=::ffff:0:0/96add blackhole comment=&quot;defconf: RFC6890 - discard-only&quot; disabled=no dst-address=100::/64add blackhole comment=&quot;defconf: RFC6890 - reserved&quot; disabled=no dst-address=2001::/23add blackhole comment=&quot;defconf: RFC6890 - TEREDO&quot; disabled=no dst-address=2001::/32add blackhole comment=&quot;defconf: RFC6890 - benchmarking&quot; disabled=no dst-address=2001:2::/48add blackhole comment=&quot;defconf: RFC6890 - documentation&quot; disabled=no dst-address=2001:db8::/32add blackhole comment=&quot;defconf: RFC4843 - ORCHID&quot; disabled=no dst-address=2001:10::/28add blackhole comment=&quot;defconf: RFC7343 - ORCHIDv2&quot; disabled=no dst-address=2001:20::/28add blackhole comment=&quot;defconf: RFC6890 - 6to4&quot; disabled=no dst-address=2002::/16add blackhole comment=&quot;defconf: RFC6890 - unique local&quot; disabled=no dst-address=fc00::/7add blackhole comment=&quot;defconf: RFC6890 - link local&quot; disabled=no dst-address=fe80::/10add blackhole comment=&quot;defconf: RFC3879 - site local&quot; disabled=no dst-address=fec0::/10 123456789/interface listadd name=WAN comment=&quot;defconf: WAN list&quot; add name=LAN comment=&quot;defconf: LAN list&quot; add name=ONU comment=&quot;onuconf: ONU list&quot;/interface list memberadd list=WAN comment=&quot;defconf: WAN member&quot; interface=pppoe-out1add list=LAN comment=&quot;defconf: LAN member&quot; interface=bridge1add list=ONU comment=&quot;onuconf: ONU member&quot; interface=ether4 IP相关配置 配置 address: 192.168.100.1&#x2F;24 network: 192.168.100.0 interface bridge comment local LAN IPv4 address 配置光猫接口ip address: 192.168.1.2&#x2F;24 network 192.168.1.0 interface ether1 comment link IPv4 address for ONU DHCP客户端 添加地址池 Name dhcpv4-pool1 Addresses 192.168.100.50-192.168.100.200 Comment local LAN DHCPv4 pool 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869## Filter 规则 9 条 + 虚拟规则 1 条## NAT 规则 2 条## Mangle 规则 2 条 + 虚拟规则 3 条## Address-list 规则 2 条/ip firewall address-listadd address=192.168.1.1 comment=&quot;onuconf: local ONU address&quot; list=local_onu_ipv4add address=10.0.1.0/24 comment=&quot;lanconf: local LAN address&quot; list=local_lan_ipv4/ip firewall filteradd action=accept chain=input comment=&quot;defconf: accept established,related,untracked&quot; connection-state=established,related,untrackedadd action=drop chain=input comment=&quot;defconf: drop invalid&quot; connection-state=invalidadd action=accept chain=input comment=&quot;defconf: accept ICMP&quot; protocol=icmpadd action=drop chain=input comment=&quot;defconf: drop all not from LAN&quot; in-interface-list=!LANadd action=fasttrack-connection chain=forward comment=&quot;defconf: fasttrack&quot; connection-state=established,related hw-offload=yes disabled=yesadd action=accept chain=forward comment=&quot;defconf: accept established,related,untracked&quot; connection-state=established,related,untrackedadd action=drop chain=forward in-interface-list=!LAN comment=&quot;defconf: drop invalid&quot; connection-state=invalidadd action=drop chain=forward comment=&quot;defconf: drop all from WAN not DSTNATed&quot; connection-nat-state=!dstnat connection-state=new in-interface-list=WAN log=yes log-prefix=&quot;[wan-not-dnat]&quot;add action=drop chain=forward comment=&quot;onuconf: drop all from ONU not DSTNATed&quot; connection-nat-state=!dstnat connection-state=new in-interface-list=ONU log=yes log-prefix=&quot;[onu-not-dnat]&quot; /ip firewall natadd action=masquerade chain=srcnat comment=&quot;defconf: masquerade IPv4&quot; out-interface-list=WANadd action=masquerade chain=srcnat comment=&quot;onuconf: access to ONU&quot; out-interface-list=ONU src-address-list=local_lan_ipv4 dst-address-list=local_onu_ipv4 /ip firewall mangleadd action=change-mss chain=forward comment=&quot;defconf: fix IPv4 mss for WAN&quot; new-mss=clamp-to-pmtu passthrough=yes protocol=tcp tcp-flags=synadd action=accept chain=prerouting comment=&quot;onuconf: access to ONU&quot; src-address-list=local_lan_ipv4 dst-address-list=local_onu_ipv4/ip settingsset max-neighbor-entries=1024 rp-filter=loose tcp-syncookies=yes/ip neighbor discovery-settingsset discover-interface-list=none/ip proxyset enabled=no/ip socksset enabled=no/ip upnpset enabled=no/ip cloudset ddns-enabled=no update-time=no/ip sshset strong-crypto=yes/tool mac-serverset allowed-interface-list=none/tool mac-server mac-winboxset allowed-interface-list=none/tool mac-server pingset enabled=no/tool bandwidth-serverset enabled=no 12345678910111213141516/ip routeadd blackhole comment=&quot;defconf: RFC6890 - this network&quot; disabled=no dst-address=0.0.0.0/8add blackhole comment=&quot;defconf: RFC6890 - private networks&quot; disabled=no dst-address=10.0.0.0/8add blackhole comment=&quot;defconf: RFC6890 - shared address&quot; disabled=no dst-address=100.64.0.0/10add blackhole comment=&quot;defconf: RFC6890 - link local&quot; disabled=no dst-address=169.254.0.0/16add blackhole comment=&quot;defconf: RFC6890 - private networks&quot; disabled=no dst-address=172.16.0.0/12add blackhole comment=&quot;defconf: RFC6890 - reserved&quot; disabled=no dst-address=192.0.0.0/24add blackhole comment=&quot;defconf: RFC6890 - DS-Lite&quot; disabled=no dst-address=192.0.0.0/29add blackhole comment=&quot;defconf: RFC6890 - TEST-NET-1&quot; disabled=no dst-address=192.0.2.0/24add blackhole comment=&quot;defconf: RFC6890 - 6to4 relay&quot; disabled=no dst-address=192.88.99.0/24add blackhole comment=&quot;defconf: RFC6890 - private networks&quot; disabled=no dst-address=192.168.0.0/16add blackhole comment=&quot;defconf: RFC6890 - benchmarking&quot; disabled=no dst-address=198.18.0.0/15add blackhole comment=&quot;defconf: RFC6890 - TEST-NET-2&quot; disabled=no dst-address=198.51.100.0/24add blackhole comment=&quot;defconf: RFC6890 - TEST-NET-3&quot; disabled=no dst-address=203.0.113.0/24add blackhole comment=&quot;defconf: RFC6890 - reserved&quot; disabled=no dst-address=240.0.0.0/4 ipv612345678910111213141516171819202122232425262728293031323334353637383940414243444546## Filter 规则 13 条## NAT 规则 1 条## Mangle 规则 1 条## Address-list 规则 10 条/ipv6 firewall address-listadd address=::1/128 comment=&quot;defconf: RFC6890 - loopback&quot; list=bad_ipv6add address=::/128 comment=&quot;defconf: RFC6890 - unspecified&quot; list=bad_ipv6add address=100::/64 comment=&quot;defconf: RFC6890 - discard-only&quot; list=bad_ipv6add address=0000::/96 comment=&quot;defconf: RFC4291 - IPv4 compatible&quot; list=bad_ipv6add address=::ffff:0:0/96 comment=&quot;defconf: RFC6890 - IPv4 mapped&quot; list=bad_ipv6add address=2001::/23 comment=&quot;defconf: RFC6890 - reserved&quot; list=bad_ipv6add address=2001:db8::/32 comment=&quot;defconf: RFC6890 - documentation&quot; list=bad_ipv6add address=2001:10::/28 comment=&quot;defconf: RFC4843 - ORCHID&quot; list=bad_ipv6add address=2001:20::/28 comment=&quot;defconf: RFC7343 - ORCHIDv2&quot; list=bad_ipv6add address=fec0::/10 comment=&quot;defconf: RFC3879 - site local&quot; list=bad_ipv6 /ipv6 firewall filteradd action=accept chain=input comment=&quot;defconf: accept established,related,untracked&quot; connection-state=established,related,untrackedadd action=drop chain=input comment=&quot;defconf: drop invalid&quot; connection-state=invalidadd action=accept chain=input comment=&quot;defconf: accept ICMPv6&quot; protocol=icmpv6add action=accept chain=input comment=&quot;defconf: accept UDP traceroute&quot; dst-port=33434-33534 protocol=udpadd action=accept chain=input comment=&quot;defconf: accept DHCPv6-Client prefix delegation&quot; dst-port=546 protocol=udp src-address=fe80::/10 log=yes log-prefix=&quot;[ipv6-pd]&quot;add action=drop chain=input comment=&quot;defconf: drop all not from LAN&quot; in-interface-list=!LANadd action=accept chain=forward comment=&quot;defconf: accept established,related,untracked&quot; connection-state=established,related,untrackedadd action=drop chain=forward comment=&quot;defconf: drop invalid&quot; connection-state=invalidadd action=drop chain=forward comment=&quot;defconf: drop bogon IPs&quot; src-address-list=bad_ipv6add action=drop chain=forward comment=&quot;defconf: drop bogon IPs&quot; dst-address-list=bad_ipv6add action=drop chain=forward comment=&quot;defconf: rfc4890 drop hop-limit=1&quot; hop-limit=equal:1 protocol=icmpv6add action=accept chain=forward comment=&quot;defconf: accept ICMPv6&quot; protocol=icmpv6add action=drop chain=forward comment=&quot;defconf: drop all not from LAN&quot; in-interface-list=!LAN /ipv6 firewall natadd action=masquerade chain=srcnat comment=&quot;defconf: masquerade IPv6&quot; out-interface-list=WAN disabled=yes/ipv6 firewall mangleadd action=change-mss chain=forward comment=&quot;defconf: fix IPv6 mss for WAN&quot; new-mss=clamp-to-pmtu passthrough=yes protocol=tcp tcp-flags=syn","tags":["Proxmox","软路由"]},{"title":"CentOS8 部署 Kubernetes","path":"/2021/12/12/CentOS8 部署 Kubernetes/","content":"Centos8 部署 kubernetes开启网络设置1234567cd /etc/sysconfig/network-scripts/vi ifcfg-ens18把 ONBOOT=no 设置为 yes## 更新库dnf updatednf upgrade 添加阿里源12rm -rfv /etc/yum.repos.d/*curl -o /etc/yum.repos.d/CentOS-Base.repo &lt;http://mirrors.aliyun.com/repo/Centos-8.repo&gt; 配置主机名123456[root@master ~]# cat /etc/hosts127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain610.0.0.30 k8s-m110.0.0.31 k8s-s110.0.0.32 k8s-s2 设置永久主机名称123sudo hostnamectl set-hostname k8s-m1sudo hostnamectl set-hostname k8s-s1sudo hostnamectl set-hostname k8s-s2 关闭swap，注释swap分区1234567891011121314151617181920[root@master ~]# swapoff -a删除 swap 挂载，这样系统下次启动不会再挂载 swap[root@master ~]# cat /etc/fstab# 注释 swap 行## /etc/fstab# Created by anaconda on Tue Mar 31 22:44:34 2020## Accessible filesystems, by reference, are maintained under &#x27;/dev/disk/&#x27;.# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.## After editing this file, run &#x27;systemctl daemon-reload&#x27; to update systemd# units generated from this file.#/dev/mapper/cl-root / xfs defaults 0 0UUID=5fecb240-379b-4331-ba04-f41338e81a6e /boot ext4 defaults 1 2/dev/mapper/cl-home /home xfs defaults 0 0#/dev/mapper/cl-swap swap swap defaults 0 0 配置内核参数，将桥接的IPv4流量传递到iptables的链123456[root@master ~]# cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt;EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOFsysctl --system 安装常用包12yum install vim bash-completion net-tools gcc -y 通用安装Docker1234567891011121314## 安装docker所需的依赖包sudo dnf install -y yum-utils \\\\ device-mapper-persistent-data \\\\ lvm2## 安装Docker稳定储存库sudo yum-config-manager \\\\ --add-repo \\\\ &lt;https://download.docker.com/linux/centos/docker-ce.repo&gt;## 安装Docker dnf install &lt;https://download.docker.com/linux/centos/8/x86_64/stable/Packages/docker-ce-19.03.13-3.el8.x86_64.rpm&gt; dnf install docker-ce docker-ce-cli 安装kubectl、kubelet、kubeadm12345678910[root@master ~]# cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg &lt;https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg&gt;EOF 123[root@master ~]# yum install kubectl kubelet kubeadm[root@master ~]# systemctl enable kubelet 初始化k8s集群POD的网段为: 10.11.0.0&#x2F;16， api server地址就是master本机IP这一步很关键，由于kubeadm 默认从官网k8s.grc.io下载所需镜像，国内无法访问，因此需要通过–image-repository指定阿里云镜像仓库地址 12345 kubeadm init --kubernetes-version=v1.20.1 \\\\--apiserver-advertise-address=10.0.0.30 \\\\--image-repository registry.aliyuncs.com/google_containers \\\\--service-cidr=10.10.0.0/16 --pod-network-cidr=10.11.0.0/16 master 节点输入 1234mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config node 节点加入输入 123kubeadm join 10.0.0.30:6443 --token kxyqzb.kvpwpv3ho7ucb73s \\\\ --discovery-token-ca-cert-hash sha256:361860a76516baae22e850e7258a532d2adbe5e661299cd42f35649ba944db39 执行下面命令，使kubectl可以自动补充 12source &lt;(kubectl completion bash) 查看节点，pod 1234567891011121314[root@master ~]# kubectl get nodeNAME STATUS ROLES AGE VERSIONmaster.paas.com NotReady master 2m29s v1.18.0[root@master ~]# kubectl get pod --all-namespacesNAMESPACE NAME READY STATUS RESTARTS AGEkube-system coredns-7ff77c879f-fsj9l 0/1 Pending 0 2m12skube-system coredns-7ff77c879f-q5ll2 0/1 Pending 0 2m12skube-system etcd-master.paas.com 1/1 Running 0 2m22skube-system kube-apiserver-master.paas.com 1/1 Running 0 2m22skube-system kube-controller-manager-master.paas.com 1/1 Running 0 2m22skube-system kube-proxy-th472 1/1 Running 0 2m12skube-system kube-scheduler-master.paas.com 1/1 Running 0 2m22s[root@master ~]# 安装calico网络12kubectl apply -f &lt;https://docs.projectcalico.org/manifests/calico.yaml&gt; 查看pod和node 12345678910111213141516[root@master ~]# kubectl get pod --all-namespacesNAMESPACE NAME READY STATUS RESTARTS AGEkube-system calico-kube-controllers-555fc8cc5c-k8rbk 1/1 Running 0 36skube-system calico-node-5km27 1/1 Running 0 36skube-system coredns-7ff77c879f-fsj9l 1/1 Running 0 5m22skube-system coredns-7ff77c879f-q5ll2 1/1 Running 0 5m22skube-system etcd-master.paas.com 1/1 Running 0 5m32skube-system kube-apiserver-master.paas.com 1/1 Running 0 5m32skube-system kube-controller-manager-master.paas.com 1/1 Running 0 5m32skube-system kube-proxy-th472 1/1 Running 0 5m22skube-system kube-scheduler-master.paas.com 1/1 Running 0 5m32s[root@master ~]# kubectl get nodeNAME STATUS ROLES AGE VERSIONmaster.paas.com Ready master 5m47s v1.18.0[root@master ~]# 安装kubernetes-dashboard官方部署dashboard的服务没使用nodeport，将yaml文件下载到本地，在service里添加nodeport 12345678910111213141516171819202122232425262728293031323334[root@master ~]# wget &lt;https://raw.githubusercontent.com/kubernetes/dashboard/v2.1.0/aio/deploy/recommended.yaml&gt;[root@master ~]# vim recommended.yamlkind: ServiceapiVersion: v1metadata: labels: k8s-app: kubernetes-dashboard name: kubernetes-dashboard namespace: kubernetes-dashboardspec: type: NodePort ports: - port: 443 targetPort: 8443 nodePort: 30000 selector: k8s-app: kubernetes-dashboard[root@master ~]# kubectl create -f recommended.yamlnamespace/kubernetes-dashboard createdserviceaccount/kubernetes-dashboard createdservice/kubernetes-dashboard createdsecret/kubernetes-dashboard-certs createdsecret/kubernetes-dashboard-csrf createdsecret/kubernetes-dashboard-key-holder createdconfigmap/kubernetes-dashboard-settings createdrole.rbac.authorization.k8s.io/kubernetes-dashboard createdclusterrole.rbac.authorization.k8s.io/kubernetes-dashboard createdrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard createdclusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard createddeployment.apps/kubernetes-dashboard createdservice/dashboard-metrics-scraper createddeployment.apps/dashboard-metrics-scraper created 1234567## 官方设置方法kubectl apply -f &lt;https://raw.githubusercontent.com/kubernetes/dashboard/v2.1.0/aio/deploy/recommended.yaml&gt;// 删除原来的配置kubectl delete -f recommended.yaml// 创建新的配置kubectl create -f recommended.yaml 查看pod，service 123456789NAME READY STATUS RESTARTS AGEdashboard-metrics-scraper-dc6947fbf-869kf 1/1 Running 0 37skubernetes-dashboard-5d4dc8b976-sdxxt 1/1 Running 0 37s[root@master ~]# kubectl get svc -n kubernetes-dashboardNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEdashboard-metrics-scraper ClusterIP 10.10.58.93 &lt;none&gt; 8000/TCP 44skubernetes-dashboard NodePort 10.10.132.66 &lt;none&gt; 443:30000/TCP 44s[root@master ~]# 使用token进行登录，执行下面命令获取token 1234kubectl describe secrets -n kubernetes-dashboard kubernetes-dashboard-token | grep token | awk &#x27;NR==3&#123;print $2&#125;&#x27;eyJhbGciOiJSUzI1NiIsImtpZCI6IlJBMmF5WXYxVnVTeEJId2gtVE5ka25LcjZZcmdIWXZZZTdtTEwtUjUybmMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZC10b2tlbi10eHQ5ZyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImFmNTVlZWVhLWQwNjMtNDNlNi04Y2I5LWUxY2UxY2U1MTIxNiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDprdWJlcm5ldGVzLWRhc2hib2FyZCJ9.q214u1ao8hVbzgzYv3kVsp40OPZvkVqD5iAmV9y4hGJdXRMTjCxafjiAq7AKdBG19fdJQOLZLqMVba1fX465MyAUbKGE9Z6UlQpU0XGZVNSx67r_QYDu_Pby1b3HzFnu0xW8Rhk6q9dP2al-3PaNaUrwShPg11L-NAP6E78coRDd3tmyZN_GvPPQXVg3nOJbmPlXLMwv88GalhtzpEJIzvICTH2-Fq_ltoMwWRu_LwhmP_w1S7giRMhte1-N7TAXE-ZPnGuBhrdVXcdrxtiPu3-W5233gOr-mdGXdDKaTB-O46VVF9KlYCf5dEjJ64NqjlgyvixZVF-WzwuytgTotg Q&amp;A无法找见命名空间问题12345## 删除旧的权限kubectl delete clusterrolebinding serviceaccount-cluster-admin## 添加权限kubectl create clusterrolebinding serviceaccount-cluster-admin --clusterrole=cluster-admin --user=system:serviceaccount:kubernetes-dashboard:kubernetes-dashboard 查询端口占用情况1netstat -ltnp | grep -w &quot;:10250&quot; 更新Node 节点123systemctl stop kubeletrm -f /etc/kubernetes/kubelet.confrm -f /etc/kubernetes/pki/ca.crt Unable to connect to the server: x509: certificate signed by unknown authority (possibly because of “crypto&#x2F;rsa: verification error” while trying to verify candidate authority certi12345mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/configsudo systemctl status kubeletsudo systemctl restart kubelet Kubernetes报错：Error from server: error dialing backend: dial tcp x.x.x.x:10250: connect: no route to host1234567891011121314执行kubectl命令时报错#查看日志kubectl logs xxxxx#进入pod容器kubectl exec -it xxxx检查Pod所在节点的防火墙是否开启#查看Pod所在的Nodekubectl get pods -o wide#在Node节点查看防火墙状态systemctl status firewalld#如果出现绿色running状态，可考虑关闭防火墙，或通过iptables放行入方向10250端口，这里仅关闭防火墙systemctl disable --now firewalld 其他资料 https://hub.docker.com/r/arvon2014/webstack-laravel https://github.com/WebStackPage/WebStackPage.github.io Gitlab CICD 与Kubernetes实践·部署GitLab https://cloud.tencent.com/developer/article/1737658 kubernetes 持久化存储(一) https://www.qikqiak.com/post/kubernetes-persistent-volume1/ kubernetes 持久化存储(二) https://www.qikqiak.com/post/kubernetes-persistent-volume2/ K8s上部署Redis集群 https://www.yisu.com/zixun/445279.htmlhttps://blog.csdn.net/saynaihe/article/details/115370537 Kubernetes 1.20.5 安装gitlab https://blog.csdn.net/saynaihe/article/details/115370537 https://juejin.cn/user/3808364011463678 https://github.com/cnych/qikqiak.com https://www.yuque.com/duiniwukenaihe https://duiniwukenaihe.github.io/","tags":["开发","Linux"]},{"title":"CentOS7 安装和配置","path":"/2021/07/12/CentOS 系统安装和配置/","content":"前言NFS 是 Network File System 的缩写，即网络文件系统。功能是让客户端通过网络访问不同主机上磁盘里的数据，主要用在类 Unix 系统上实现文件共享的一种方法。 本例演示 CentOS 7 下安装和配置 NFS 的基本步骤。 环境说明CentOS 7（Minimal Install） 123$ cat /etc/redhat-releaseCentOS Linux release 7.5.1804 (Core) 本例演示环境如下 NameIP AddrDescpritionServer192.169.0.110服务端 IPClient192.168.0.101客户端 IPWindows Client192.168.0.102Windows Server 2008 根据官网说明 Chapter 8. Network File System (NFS) - Red Hat Customer Portal，CentOS 7.4 以后，支持 NFS v4.2 不需要 rpcbind 了，但是如果客户端只支持 NFC v3 则需要 rpcbind 这个服务。 服务端服务端安装使用 yum 安装 NFS 安装包。 12$ sudo yum install nfs-utils 注意 只安装 nfs-utils 即可，rpcbind 属于它的依赖，也会安装上。 服务端配置设置 NFS 服务开机启动 123$ sudo systemctl enable rpcbind$ sudo systemctl enable nfs 启动 NFS 服务 123$ sudo systemctl start rpcbind$ sudo systemctl start nfs 防火墙需要打开 rpc-bind 和 nfs 的服务 12345$ sudo firewall-cmd --zone=public --permanent --add-service=&#123;rpc-bind,mountd,nfs&#125;success$ sudo firewall-cmd --reloadsuccess 配置共享目录服务启动之后，我们在服务端配置一个共享目录 123$ sudo mkdir /data$ sudo chmod 755 /data 根据这个目录，相应配置导出目录 添加如下配置 1/data/ 192.168.0.0/24(rw,sync,no_root_squash,no_all_squash) /data: 共享目录位置。 192.168.0.0/24: 客户端 IP 范围，&#96;&#96; 代表所有，即没有限制。 rw: 权限设置，可读可写。 sync: 同步共享目录。 no_root_squash: 可以使用 root 授权。 no_all_squash: 可以使用普通用户授权。 :wq 保存设置之后，重启 NFS 服务。 12$ sudo systemctl restart nfs 可以检查一下本地的共享目录 1234$ showmount -e localhostExport list for localhost:/data 192.168.0.0/24 这样，服务端就配置好了，接下来配置客户端，连接服务端，使用共享目录。 Linux 客户端客户端安装与服务端类似 12$ sudo yum install nfs-utils 客户端配置设置 rpcbind 服务的开机启动 12$ sudo systemctl enable rpcbind 启动 NFS 服务 12$ sudo systemctl start rpcbind 注意 客户端不需要打开防火墙，因为客户端时发出请求方，网络能连接到服务端即可。客户端也不需要开启 NFS 服务，因为不共享目录。 客户端连接 NFS先查服务端的共享目录 1234$ showmount -e 192.168.0.110Export list for 192.168.0.110:/data 192.168.0.0/24 在客户端创建目录 挂载 12$ sudo mount -t nfs 192.168.0.101:/data /data 挂载之后，可以使用 mount 命令查看一下 12345$ mount......192.168.0.110:/data on /data type nfs4 (rw,relatime,sync,vers=4.1,rsize=131072,wsize=131072,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=192.168.0.100,local_lock=none,addr=192.168.0.101) 这说明已经挂载成功了。 测试 NFS测试一下，在客户端向共享目录创建一个文件 123$ cd /data$ sudo touch a 之后取 NFS 服务端 192.168.0.101 查看一下 12345$ cd /data$ lltotal 0-rw-r--r--. 1 root root 0 Aug 8 18:46 a 可以看到，共享目录已经写入了。 客户端自动挂载自动挂载很常用，客户端设置一下即可。 在结尾添加类似如下配置 12345678910111213## /etc/fstab# Created by anaconda on Thu May 25 13:11:52 2017## Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info#/dev/mapper/cl-root / xfs defaults 0 0UUID=414ee961-c1cb-4715-b321-241dbe2e9a32 /boot xfs defaults 0 0/dev/mapper/cl-home /home xfs defaults 0 0/dev/mapper/cl-swap swap swap defaults 0 0192.168.0.110:/data /data nfs defaults 0 0 由于修改了 /etc/fstab，需要重新加载 systemctl。 12$ sudo systemctl daemon-reload 之后查看一下 12345$ mount......192.168.0.110:/data on /data type nfs4 (rw,relatime,vers=4.1,rsize=131072,wsize=131072,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=192.168.0.100,local_lock=none,addr=192.168.0.101) 此时已经启动好了。如果实在不放心，可以重启一下客户端的操作系统，之后再查看一下。 Windows 客户端Windows 安装 NFS 客户端，不同的 Windows 版本，安装方式不大一样，本例列举几个。 Windows步骤Windows Server 2008servermanagercmd.exe -install FS-NFS-ServicesWindows 7程序和功能 - 启动或关闭 Widnows 功能 - NFS 服务Windows Server 2012添加功能角色 - 添加文件打印服务 - NFS 客户端Windows 10程序和功能 - 启动或关闭 Widnows 功能 - NFS 服务 客户端安装本例的 Windows 为 Windows Server 2008 R2 12C:&gt; servermanagercmd.exe -install FS-NFS-Services 客户端配置首先要了解服务端的文件夹权限，本例服务端 /data 目录的所有者为 root，查看一下 root 用户的信息 123$ sudo id rootuid=0(root) gid=0(root) groups=0(root) 可以看到 uid=0, gid=0，需要在 Windows 客户端上进行配置，参考 UID&#x2F;GID using the registry entries 注意本例以 root 为例，生产环境要考虑安全因素，请修改为相应的有权限的用户 回到 Windows 进行配置 首先，启动注册表编辑器 然后，进行如下步骤 定位到这一项 HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\ClientForNFS\\\\CurrentVersion\\\\Default 创建两个 DWORD 值，名称分别为 AnonymousUid 和 AnonymousGid 设置 UID 和 GID 的值，本例设置为 0 重启 Windows 操作系统 (或者重启 NFS Client 服务) 服务器重启之后，挂载文件夹，在 DOS 命令窗口输入命令 12C:&gt; mount 192.168.0.110:/data X: 这样，就将 NFS 服务端的共享文件夹挂载到了本地的 X: 盘， 也可以卸载掉这个驱动器，使用如下命令： 注意 通过此命令操作挂载，当服务器重启时，不会自动挂载。 登录时自动挂载，进行如下步骤 点击此电脑 在弹出的计算机对话框中，在工具栏找到 映射网络驱动器 驱动器地址输入 X: 文件夹输入 192.168.0.110:/data 确认 登录时重新连接 是勾选的，这个配置表示登录时自动挂载共享目录。 客户端测试Windows 操作都是有界面的，本例不做具体截图，可以点击进入 X 盘，创建文件夹试试，然后新建文件试试。 如果有问题，请确认一下服务端的文件加权限。 结论本文演示了 CentOS 7 下 yum 安装和配置 NFS，以及服务端和客户端的配置。 CentOS 8 安装和配置安装Docker12curl -fsSL [https://get.docker.com](https://get.docker.com/) | bash -s docker --mirror Aliyuncurl -sSL [https://get.daocloud.io/docker](https://get.daocloud.io/docker) | sh 配置网络12345678910111213141516171819202122# centos8已经发布了，下载了一个体验一下，新安装好的centos8默认网卡是没有启动的，安装好后需要先配置网络。在/etc/sysconfig/network-scripts目录下存放着网卡的配置文件，文件名称是ifcfg- 网卡名称。# 查看linux的IPip addr show# 网卡配置文件按默认配置TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=dhcpDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens33UUID=e4987998-a4ce-4cef-96f5-a3106a97f5bfDEVICE=ens33ONBOOT=no #如果使用dhcp分配ip的话，只需要将这里no改为yes，然后重启网络服务就行 1234567891011121314151617181920# 如果需要配置静态ip，则按照以下修改方法修改TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=static #将dhcp修改为stati表示使用静态ipDEFROUTE=yesIPADDR=192.168.128.129 #设置IP地址NETMASK=255.255.255.0 #设置子网掩码GATEWAY=192.168.128.1 #设置网关DNS1=114.114.114.114 #设置dnsIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens33UUID=e4987998-a4ce-4cef-96f5-a3106a97f5bfDEVICE=ens33ONBOOT=yes #将no改为yes 修改软件源123456789101112131415161718192021cd /etc/yum.repos.dvi CentOS-Base.repo## 修改为如下内容 CentOS-Base.repo[BaseOS]name=CentOS-$releasever - Basebaseurl=https://mirrors.aliyun.com/centos/$releasever/BaseOS/$basearch/os/gpgcheck=1enabled=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficialvi CentOS-AppStream.repo## CentOS-AppStream.repo[AppStream]name=CentOS-$releasever - AppStreambaseurl=https://mirrors.aliyun.com/centos/$releasever/AppStream/$basearch/os/gpgcheck=1enabled=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial 参考资料Setting Up NFS Server And Client On CentOS 7Chapter 8. Network File System (NFS) - Red Hat Customer PortalCan I Set Up User Name Mapping in Windows Vista?","tags":["开发","Linux"]},{"title":"Git 常用操作","path":"/2021/07/12/Git 常用操作/","content":"ssh key1ssh-keygen -t rsa -C &quot;[admin@gmail.com](mailto:admin@gmail.com)&quot; 用git删除tag的方法如下：12345# 删除本地taggit tag -d 1.0.0# 删除远程taggit push origin :refs/tags/1.0.0 用户信息第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录： 123git config --global user.name &quot;admin&quot;git config --global user.email admin@gmail.com 本地项目指向新的源12git remote set-url origin &lt;https://gitlab.google.com/mobileios/Pandora.git&gt; 避免使用git pull 或 git push 提示输入账号和密码12git config --global credential.helper osxkeychain 切换到指定的Commit1git reset --hard commitID Git切换到分支1git checkout -b newbranch Git合并分支12git checkout mastergit merge newbranch Git clone SSL 错误解决忽略掉SSL验证 12git config --global http.sslVerify false Git rebase 使用12// 对git的前三步做处理git rebase -i HEAD~3 Git 修改指定提交reword fecb551 Init the view model 重排提交12345678pick fecb551 Init the view modelpick bb199a0 Update the versionpick bc5cd9d Add new method...//改为：pick bc5cd9d Add new methodpick fecb551 Init the view model 合并提交1234pick fecb551 Init the view modelsquash bb199a0 Update the versionsquash bc5cd9d Add new method 拆分提交1234pick fecb551 Init the view modeledit bb199a0 Update the versionpick bc5cd9d Add new method 清空仓库1234567891011121314151617181920212223241.Checkout git checkout --orphan latest_branch2. Add all the files git add -A3. Commit the changes git commit -am &quot;commit message&quot;4. Delete the branch git branch -D master5.Rename the current branch to master git branch -m master6.Finally, force update your repository git push -f origin master HTTPS 自颁发SSL证书验证失败git config –global http.sslVerify false git 下载子模块git submodule update –init –recursive git 添加多个仓库12git remote add origin 地址git remote set-url origin --push --add 地址 删除本地tag1git tag -d rc-5.3.0.7 删除远程tag1git push origin :refs/tags/rc-5.3.0.7 删除远程分支12git branch -r -d origin/branch-namegit push origin :branch-name git 优雅的撤销中间某次提交123456789101112git revert commit_id//如果commit_id是merge节点的话,-m是指定具体哪个提交点git revert commit_id -m 1//接着就是解决冲突git add -Agit commit -m &quot;..&quot;git revert commit_id -m 2//接着就是解决冲突git add -Agit commit -m &quot;..&quot;git push 创建一个 pod lib 工程1pod lib create KSCapeKit git patch123456git format-patche 795fefabc// 添加 pach 文件git am --abortgit am patch git 撤销某一次提交1234567891011git revert commit_id//如果commit_id是merge节点的话,-m是指定具体哪个提交点git revert commit_id -m 1//接着就是解决冲突git add -Agit commit -m &quot;..&quot;git revert commit_id -m 2//接着就是解决冲突git add -Agit commit -m &quot;..&quot;git push","tags":["工具","开发"]},{"title":"Golang 编译到 beego 多平台打包","path":"/2021/07/12/Go 编译到 beego 多平台打包/","content":"检查配置 PATH 1$ open -e ~/.bash_profile 插入下列值 12345export GOROOT=/usr/local/goexport GOPATH=~/workexport GOBIN=~/work/binexport PATH=$PATH:$GOBIN 保存并退出 1$ source ~/.bash_profile 将当前系统版本的 &#x2F; usr&#x2F;local&#x2F;go 目录全部拷贝到 $HOME&#x2F;go1.4 1$ sudo cp -R /usr/local/go ~/go1.4 下载最新的 golang 源码 (go1.7.2) 123$ cd ~/$ git clone &lt;https://go.googlesource.com/go&gt;$ sudo cp -R ~/go /usr/local/go 编译最新版本 12$ cd $GOROOT/src$ sudo ./all.bash 编译交叉编译环境 12$ sudo CGO_ENABLED=0 GOOS=linux GOARCH=amd64 ./make.bash$ sudo CGO_ENABLED=0 GOOS=windows GOARCH=386 ./make.bash 安装 Beego 和 Bee 的开发工具 1234$ go get github.com/astaxie/beego$ go get github.com/beego/bee$ cd $GOPATH/src/github.com/beego/bee$ CGO_ENABLED=0 make 用 bee 工具快速新建一个 beegoProject 实例 12$ cd $GOPATH/src/$ bee new beegoProject 测试运行 12$ cd beegoProject$ bee run 打开 chrome http://localhost:8080 打包 go 交叉编译环境下编译 (需自行拷贝静态文件) 123$ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build$ CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build$ CGO_ENABLED=0 GOOS=windows GOARCH=386 go build beego bee 工具打包 123$ bee pack -be GOOS=linux -be GOARCH=amd64$ bee pack -be GOOS=windows$ bee pack -be GOOS=windows -be GOARCH=386","tags":["开发","Linux"]},{"title":"Docker 搭建私有仓库","path":"/2021/07/12/Docker 搭建私有仓库/","content":"这篇文章内容包括搭建 docker 私有仓库的一些配置项和遇到的问题及解决方案。 1234567891011121.配置项1.1\\\\. 数据持久化1.2\\\\. TLS 支持1.3\\\\. 登录授权验证1.4\\\\. docker compose2\\\\. 测试3\\\\. NGINX做代理3.1\\\\. 我的方式和遇到的问题3.2\\\\. NGINX 作为一个容器4\\\\. 其它方案5\\\\. 相关链接 Docker 官方提供了 registry 镜像， 可以方便的搭建私有仓库，详细文档参考这里。 配置项数据持久化可以通过采用数据卷挂载或者直接挂载宿主机目录的方式来进行。挂载到容器内默认位置: /var/lib/registry 。比如可以像如下方式启动, 这里将容器数据存储在了 /mnt/registry. 1234567$ docker run -d \\\\ -p 5000:5000 \\\\ --restart=always \\\\ --name registry \\\\ -v /mnt/registry:/var/lib/registry \\\\ registry:2 当然，镜像还提供了其它支持的存储方式，比如 OSS 等。 官方文档参见这里。 TLS 支持为了使得私有仓库安全地对外开放，需要配置 TLS 支持。 测试的时候，如果不配置的话 TLS，可以在 docker 客户端中的 “insecure registry” 里添加私有仓库地址，不然默认的都以安全的 tsl 方式来访问私有仓库，具体更改方式可以参考这里。 我的 CA 证书是从阿里云获取的（因为域名是在上面注册的，可以提供免费的证书，虽然如果做得很隐蔽）。 registry 镜像可以通过 REGISTRY_HTTP_TLS_CERTIFICATE 和 REGISTRY_HTTP_TLS_KEY 环境参数配置 TLS 支持。例如下面这样， domain.crt 和 domain.key 是获得的证书，另外配置容器监听 ssl 默认的 443 端口。 12345678910$ docker run -d \\\\ --restart=always \\\\ --name registry \\\\ -v `pwd`/certs:/certs \\\\ -e REGISTRY_HTTP_ADDR=0.0.0.0:443 \\\\ -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \\\\ -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \\\\ -p 443:443 \\\\ registry:2 官方文档参见这里。 登录授权验证可以通过 htpasswd 来配置简单的 authentication （注意：验证需要 TLS 支持）。 首先在 auth 目录下通过 reistry 里的 htpasswd 工具创建 验证文件 auth/htpasswd 。 12345$ mkdir auth$ docker run \\\\ --entrypoint htpasswd \\\\ registry:2 -Bbn testuser testpassword &gt; auth/htpasswd 启动的时候通过 REGISTRY_AUTH, REGISTRY_AUTH_HTPASSWD_REALM, REGISTRY_AUTH_HTPASSWD_PATH 来配置： 12345678910111213$ docker run -d \\\\ -p 5000:5000 \\\\ --restart=always \\\\ --name registry \\\\ -v `pwd`/auth:/auth \\\\ -e &quot;REGISTRY_AUTH=htpasswd&quot; \\\\ -e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \\\\ -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\\\ -v `pwd`/certs:/certs \\\\ -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \\\\ -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \\\\ registry:2 这样就启动了一个监听 5000 端口的、支持 TLS 和简单登录验证的 docker 私有仓库。 官方文档参见这里。 docker compose“docker compose” 是一个方便定义和运行多个容器的工具， 安装参见这里， 或者通过 pip 安装： pip install docker-compose 以上配置项通过 docker compose 的方式组织起来如下: 文件命名成 docker-compose.yaml 12345678910111213141516registry: restart: always image: registry:2 ports: - 5000:5000 environment: REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain.crt REGISTRY_HTTP_TLS_KEY: /certs/domain.key REGISTRY_AUTH: htpasswd REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm volumes: - /path/data:/var/lib/registry - /path/certs:/certs - /path/auth:/auth 在 docker-compose.yaml 所在目录运行： 12docker-compose up 测试私有仓库搭建好了如何测试？ 123456789101112# 先拉取官方镜像$ docker pull ubuntu:16.04# 打上标签$ docker tag ubuntu:16.04 myregistrydomain.com/my-ubuntu# 推到私有仓库$ docker push myregistrydomain.com/my-ubuntu# 从私有仓库获取$ docker pull myregistrydomain.com/my-ubuntu Nginx 做代理我的方式和遇到的问题实际配置中，我采用了 nginx 作为代理，来访问 registry 服务。我将 TLS 支持和登录验证都加到了 nginx 一层。 nginx 配置文件: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657upstream docker-registry &#123; server localhost:5000; # ！转发到registry 监听的5000 端口！&#125;## Set a variable to help us decide if we need to add the## &#x27;Docker-Distribution-Api-Version&#x27; header.## The registry always sets this header.## In the case of nginx performing auth, the header is unset## since nginx is auth-ing before proxying.map $upstream_http_docker_distribution_api_version $docker_distribution_api_version &#123; &#x27;&#x27; &#x27;registry/2.0&#x27;;&#125;server &#123; listen 443 ssl; server_name domain.com; # ！这里配置域名！ # SSL ssl_certificate /path/to/domain.pem; # ！这里配置CA 证书信息！ ssl_certificate_key /path/to/domain.key; # ！这里配置CA 证书信息！ # Recommendations from &lt;https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html&gt; ssl_protocols TLSv1.1 TLSv1.2; ssl_ciphers &#x27;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&#x27;; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; # disable any limits to avoid HTTP 413 for large image uploads client_max_body_size 0; # required to avoid HTTP 411: see Issue #1486 (&lt;https://github.com/moby/moby/issues/1486&gt;) chunked_transfer_encoding on; location /v2/ &#123; # Do not allow connections from docker 1.5 and earlier # docker pre-1.6.0 did not properly set the user agent on ping, catch &quot;Go *&quot; user agents if ($http_user_agent ~ &quot;^(docker\\\\/1\\\\.(3|4|5(?!\\\\.[0-9]-dev))|Go ).*$&quot; ) &#123; return 404; &#125; # To add basic authentication to v2 use auth_basic setting. auth_basic &quot;Registry realm&quot;; auth_basic_user_file /path/to/auth/htpasswd; # ！这里配置auth文件位置！ ## If $docker_distribution_api_version is empty, the header is not added. ## See the map directive above where this variable is defined. add_header &#x27;Docker-Distribution-Api-Version&#x27; $docker_distribution_api_version always; proxy_pass &lt;http://docker-registry&gt;; proxy_set_header Host $http_host; # required for docker client&#x27;s sake proxy_set_header X-Real-IP $remote_addr; # pass on real client&#x27;s IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_read_timeout 900; &#125;&#125; 其中 /path/to/auth/htpasswd 文件是通过 registry 中的或者本地的 htpasswd 工具生成的 1234$ docker run \\\\ --entrypoint htpasswd \\\\ registry:2 -Bbn testuser testpassword &gt; auth/htpasswd registry 的 docker-compose 文件: 12345678910version: &#x27;2&#x27;services: my_registry: restart: always image: registry:2 ports: - 127.0.0.1:5000:5000 volumes: - ./data:/var/lib/registry 启动后，当我从本地视图 login 到私有仓库时，发生错误： 12345➜ ~ docker login domain.comUsername: testuserPassword:Error response from daemon: login attempt to &lt;https://hub.docker.equiz.cn/v2/&gt; failed with status: 500 Internal Server Error 查看日志发现 nginx 错误日志里有个编码相关的错误： 1234# nginx error log*4 crypt_r() failed (22: Invalid argument) 经过一番研究，发现之前加密时，是采用 Bcrypt 加密方式，看下 htpasswd 的使用说明： 1234567891011121314151617181920212223root@data1:~# htpasswdUsage: htpasswd [-cimBdpsDv] [-C cost] passwordfile username htpasswd -b[cmBdpsDv] [-C cost] passwordfile username password htpasswd -n[imBdps] [-C cost] username htpasswd -nb[mBdps] [-C cost] username password -c Create a new file. -n Don&#x27;t update file; display results on stdout. -b Use the password from the command line rather than prompting for it. -i Read password from stdin without verification (for script usage). -m Force MD5 encryption of the password (default). -B Force bcrypt encryption of the password (very secure). -C Set the computing time used for the bcrypt algorithm (higher is more secure but slower, default: 5, valid: 4 to 31). -d Force CRYPT encryption of the password (8 chars max, insecure). -s Force SHA encryption of the password (insecure). -p Do not encrypt the password (plaintext, insecure). -D Delete the specified user. -v Verify password for the specified user.On other systems than Windows and NetWare the &#x27;-p&#x27; flag will probably not work.The SHA algorithm does not use a salt and is less secure than the MD5 algorithm. 可以看到 -B 会使用 bcrypt 的方式来加密，nginx 默认不支持。至于如何让 nginx 支持 bcrypt 我暂时还未找到方案，留待以后研究了 (TODO) 简单的解决方式是换成默认的 MD5 加密（因为安全等级问题又不推荐不用 bcrypt 方式的）， 12docker run --rm --entrypoint htpasswd registry:2 -bn testuser testpassword &gt; auth/htpasswd # 这里少了 -B 选项 关于 bcrypt 加密方式，这里 有一篇不错的文章介绍。不过好像对于这个加密方式，网上有一些争论，我就不详究了。 不依赖 “apche tools” 的 nginx 加密方式参考 这里, 比如 MD5 加密: 12printf &quot;testuser:$(openssl passwd -1 testpassword)\\ &quot; &gt;&gt; .htpasswd # this example uses MD5 encryption Nginx 作为一个容器docker 文档也有如何采用 nginx 容器和 registry 配合使用的说明，参考这里。 “docker-compose.yaml” 如下： 1234567891011121314151617181920nginx: # Note : Only nginx:alpine supports bcrypt. # If you don&#x27;t need to use bcrypt, you can use a different tag. # Ref. &lt;https://github.com/nginxinc/docker-nginx/issues/29&gt; image: &quot;nginx:alpine&quot; # ！这里一定要采用alpine镜像，因为它里的nginx支持 bcrypt 加密！ ports: - 5043:443 links: - registry:registry volumes: - ./auth:/etc/nginx/conf.d - ./auth/nginx.conf:/etc/nginx/nginx.conf:roregistry: image: registry:2 ports: - 127.0.0.1:5000:5000 volumes: - ./data:/var/lib/registry 这里 nginx 容器监听的是 5043, 所以使用的私有仓库的地址变成了 registrydomain.com:5043,我不喜欢后面加端口，但本机又存在其他需要 nginx 监听的 443 端口的服务 (不同 doamin 下)，所以不能让 nginx 容器直接监听 443 端口，故没有采用这种方式。 另外在寻找解决方案的时候发现一个镜像 nginx-proxy, 可以方便地监听新添加的容器，留待以后探索。 其它方案或许你想用 letsencrypts 免费证书，不妨看看这个工具:acme.sh 或许你不满足的简易方案，你可能还需要 web 界面来方便查看和管理你的镜像仓库，那么你可以查看下企业级的容器仓库方案: vmware&#x2F;harbor 相关链接 docker ce ubuntu 安装 文档: https://docs.docker.com/insta… docker compose 安装文档: https://docs.docker.com/compo… docker registr 镜像: https://hub.docker.com/_&#x2F;regi… deploy 部署步骤文档: https://docs.docker.com/regis… 详细的 registry 的可配置项参见: https://docs.docker.com/regis… nginx 容器 bcrypt 问题: https://github.com/docker/dis… nginx 容器 bcrypt 问题 2: https://github.com/nginxinc/d…","tags":["开发","Linux"]},{"title":"Postgresql 常用操作","path":"/2021/07/12/日常用操作记录/","content":"ZFS 文件系统操作https://docs.oracle.com/cd/E24847_01&#x2F;html&#x2F;819-7065&#x2F;gaypw.html 销毁 ZFS 存储池1zpool destroy tank 通过 id 导入文件系统1zpool import -d /dev/disk/by-id/ 导入池子12zpool import naszpool import -m nas 忽略错误直接导入 查看硬盘ID12cd /dev/gptidls 查看池子中的信息1zpool status -v nas 替换池子中的硬盘1zpool replace nas gptid/1ad3cd1d-92c5-11ea-a927-ebf0fe60a317 gptid/0445ccc9-6e5d-47d3-beb7-cadf109f9ce3 删除池子中的硬盘1zpool remove nas gptid/1ad3cd1d-92c5-11ea-a927-ebf0fe60a317 Postgresql 常用操作切换用户1sudo su psotgres 登陆1psql 创建 gitlab 这个数据库：1create database gitlab owner postgres; 修改数据库Owner1alter database db owner to user; 权限添加1grant all privileges on database gitlab to postgres; 其他操作12345678- 查看数据库： \\l- 连接数据库： \\c db- 显示所有的schema： \\dn- 显示所有的用户： \\du- 显示表的权限分配情况： \\dp- 显示当前的模式： show search_path- 更改模式： set search_path to myschema- 已列的形式展示： \\x （当不想列展示时，再次\\x即可）","tags":["开发","Linux"]},{"title":"iOS 下的崩溃日志还原","path":"/2020/06/10/iOS 崩溃日志还原/","content":"一、相关文件获取1、carsh 文件首先是获取到 carsh 日志文件，但是获取到之后是没有符号表的，所以看不出是什么东西。可以用 pc 或者 mac 获取到日志文件。 2、dSYM 文件获取获取到 dSYM 以解析出到底崩在哪一行，Xcode –&gt; Window –&gt; Organize 中找到自己上传 appStore 中的包，右键 –&gt; Show in Finder –&gt; 显示包内容 –&gt; 将 dSYM 文件 copy 出来。 3、symbolicatecrash 工具在 Xcode 中自带有 symbolicatecrash 工具，用来解析 crash 文件，路径为： 1/Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash 二、还原日志上述三个文件放在同一文件夹中，名字要一致。 方法 a终端输入： 123/Users/admin/Desktop/myappcrash/symbolicatecrash/Users/admin/Desktop/myappcrash/MyAppName.crash/Users/admin/Desktop/myappcrash/MyAppName.app.dSYM &gt; MyAppCrash.log 方法 bcd 命令进入此文件夹中 1cd /Users/admin/Desktop/myappcrash 然后输入： 1./symbolicatecrash ./MyAppName.crash ./MyAppName.app.dSYM &gt; MyAppCrash.log 参考：解析苹果审核反馈崩溃日志 .txt &#x2F; .crash 文件 错误 1出现有 line 69 的错误，需要设置环境变量： 1export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer 错误 2出现 line 121 错误，如 1Error: can&#x27;t find tool named &#x27;otool&#x27; in the macosx SDK or any fallback SDKs at ./symbolicatecrash line 121. 则需要确定一下是否拿到了正确的 symbolicatecrash 文件。利用以下代码在终端中可以拿到正确的 symbolicatecrash 文件路径。 1find /Applications/Xcode.app/ -name symbolicatecrash symbolicatecrash 路径. png 比如我在路径 A 和 Current 都各有一个 symbolicatecrash，拿到正确的就不会报错了。 参考：symbolicatecrash failed 三、解析日志参考：iOS 应用崩溃日志分析","tags":["工具","开发"]}]